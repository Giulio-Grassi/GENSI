{"ast":null,"code":"var _jsxFileName = \"/Users/gg/dev/egoSurveyReact/egoSurveyReact/src/components/questionStrategy.jsx\",\n    _s = $RefreshSig$();\n\n/**\n * This components handles the top level state of the form that we will ultimately submit.\n * This component is basically the entry point of the GENSI application\n * Every \"page\" saves their state in this parent component.\n * This is a simple multi-page form architecture. \n */\nimport React from 'react';\nimport ButtonFooter from './buttonFooter';\nimport { Box } from 'grommet';\nimport { Text } from \"grommet\";\nimport NodeRow from './questionTypes/nodeRow';\nimport LineBox from './questionTypes/lineBox';\nimport Ladder from './questionTypes/ladder';\nimport MCQ from './questionTypes/mcq';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function QuestionStrategy({\n  nodes,\n  setNodes,\n  questions,\n  table,\n  setTable,\n  superNext,\n  darkMode\n}) {\n  _s();\n\n  const [currentQuestion, setCurrentQuestion] = React.useState(0);\n\n  function nextQuestion() {\n    if (currentQuestion < questions.length - 1) {\n      setCurrentQuestion(currentQuestion + 1);\n    } else {\n      superNext();\n    }\n  }\n\n  function prevQuestion() {\n    if (currentQuestion > 0) {\n      setCurrentQuestion(currentQuestion - 1);\n    }\n  }\n\n  function dragNDropValidation(buttonCallback) {\n    let valid = true;\n    let i = 0;\n\n    while (valid && i < nodes.length) {\n      //table.getRelation(question.id, x.id)\n      if (table.getRelation(questions[currentQuestion].getId(), nodes[i].getName())[0][2] === false) {\n        valid = false;\n      }\n\n      i++;\n    }\n\n    valid ? buttonCallback() : alert(\"Please put all the nodes in a box before changing page.\");\n  }\n\n  function mcqValidation(buttonCallback) {\n    let valid = true;\n\n    if (table.getRelation(questions[currentQuestion].getId(), nodes[0].getName())[0][2] === false) {\n      valid = false;\n    }\n\n    valid ? buttonCallback() : alert(\"please select an option before proceeding\");\n  }\n\n  function questionComponentSelector() {\n    switch (questions[currentQuestion].getType()) {\n      case \"select\":\n        return /*#__PURE__*/_jsxDEV(Box, {\n          id: \"case 3 box\",\n          fill: \"vertical\",\n          children: [/*#__PURE__*/_jsxDEV(Text, {\n            size: \"xxxlarge\",\n            className: \"title\",\n            children: questions[currentQuestion].getText()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(NodeRow, {\n            nodes: nodes,\n            setNodes: setNodes,\n            question: questions[currentQuestion],\n            table: table,\n            setTable: setTable,\n            filterYou: true,\n            currentQuestion: currentQuestion\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(ButtonFooter, {\n            onNext: () => nextQuestion(),\n            onPrev: () => prevQuestion()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 13\n        }, this);\n\n      case \"dragndrop\":\n        return /*#__PURE__*/_jsxDEV(Box, {\n          id: \"case 3 box\",\n          fill: \"vertical\",\n          children: [/*#__PURE__*/_jsxDEV(Text, {\n            size: \"xxxlarge\",\n            className: \"title\",\n            children: questions[currentQuestion].getText()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(LineBox, {\n            nodes: nodes,\n            question: questions[currentQuestion],\n            table: table,\n            setTable: setTable,\n            filterYou: false,\n            darkMode: darkMode\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(ButtonFooter, {\n            onNext: () => dragNDropValidation(nextQuestion),\n            onPrev: () => dragNDropValidation(prevQuestion)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 13\n        }, this);\n\n      case \"ladder\":\n        return /*#__PURE__*/_jsxDEV(Box, {\n          id: \"case 3 box\",\n          fill: \"vertical\",\n          children: [/*#__PURE__*/_jsxDEV(Text, {\n            size: \"xxxlarge\",\n            className: \"title\",\n            children: questions[currentQuestion].getText()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Ladder, {\n            nodes: nodes,\n            question: questions[currentQuestion],\n            table: table,\n            setTable: setTable,\n            filterYou: false,\n            darkMode: darkMode\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(ButtonFooter, {\n            onNext: () => dragNDropValidation(nextQuestion),\n            onPrev: () => dragNDropValidation(prevQuestion)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 13\n        }, this);\n\n      case \"mcq\":\n        return /*#__PURE__*/_jsxDEV(Box, {\n          id: \"case 3 box\",\n          fill: \"vertical\",\n          children: [/*#__PURE__*/_jsxDEV(Text, {\n            size: \"xxxlarge\",\n            className: \"title\",\n            children: questions[currentQuestion].getText()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(MCQ, {\n            node: nodes[0].getName(),\n            question: questions[currentQuestion],\n            table: table,\n            setTable: setTable,\n            filterYou: false\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(ButtonFooter, {\n            onNext: () => mcqValidation(nextQuestion),\n            onPrev: () => mcqValidation(prevQuestion)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 13\n        }, this);\n\n      default:\n        console.log('Question type not valid.', questions[currentQuestion]);\n    }\n  }\n\n  return questionComponentSelector();\n}\n\n_s(QuestionStrategy, \"9OM438k1WhEIHDwFF7YsuyU6VEk=\");\n\n_c = QuestionStrategy;\n\nvar _c;\n\n$RefreshReg$(_c, \"QuestionStrategy\");","map":{"version":3,"sources":["/Users/gg/dev/egoSurveyReact/egoSurveyReact/src/components/questionStrategy.jsx"],"names":["React","ButtonFooter","Box","Text","NodeRow","LineBox","Ladder","MCQ","QuestionStrategy","nodes","setNodes","questions","table","setTable","superNext","darkMode","currentQuestion","setCurrentQuestion","useState","nextQuestion","length","prevQuestion","dragNDropValidation","buttonCallback","valid","i","getRelation","getId","getName","alert","mcqValidation","questionComponentSelector","getType","getText","console","log"],"mappings":"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","sourcesContent":["/**\n * This components handles the top level state of the form that we will ultimately submit.\n * This component is basically the entry point of the GENSI application\n * Every \"page\" saves their state in this parent component.\n * This is a simple multi-page form architecture. \n */\nimport React from 'react';\nimport ButtonFooter from './buttonFooter'\nimport { Box } from 'grommet';\nimport { Text } from \"grommet\";\nimport NodeRow from './questionTypes/nodeRow';\nimport LineBox from './questionTypes/lineBox';\nimport Ladder from './questionTypes/ladder';\nimport MCQ from './questionTypes/mcq'\n\n\nexport default function QuestionStrategy({\n  nodes,\n  setNodes,\n  questions,\n  table,\n  setTable,\n  superNext,\n  darkMode,\n}){\n\n  const [currentQuestion, setCurrentQuestion] = React.useState(0)\n\n  function nextQuestion(){\n    if(currentQuestion < questions.length-1){\n      setCurrentQuestion(currentQuestion+1)\n    }\n    else{\n      superNext()\n    }\n  }\n\n  function prevQuestion(){\n    if(currentQuestion > 0){\n      setCurrentQuestion(currentQuestion-1)\n    }\n  }\n\n\n  function dragNDropValidation(buttonCallback){\n    let valid = true\n    let i = 0\n    while(valid && i < nodes.length){\n      //table.getRelation(question.id, x.id)\n      if(table.getRelation(questions[currentQuestion].getId(), nodes[i].getName())[0][2] === false){\n        valid = false\n      }\n      i++\n    }\n\n    valid ? buttonCallback() : alert(\"Please put all the nodes in a box before changing page.\")\n  }\n\n  function mcqValidation(buttonCallback){\n    let valid = true;\n    if(table.getRelation(questions[currentQuestion].getId(), nodes[0].getName())[0][2] === false){\n        valid = false\n    }\n    (valid)? buttonCallback() : alert(\"please select an option before proceeding\")\n  }\n\n  function questionComponentSelector(){\n    switch (questions[currentQuestion].getType()) {\n        case \"select\":\n          return (\n            <Box id=\"case 3 box\" fill= \"vertical\">\n              <Text size=\"xxxlarge\" className=\"title\">\n                {questions[currentQuestion].getText()}\n              </Text>\n              <NodeRow\n                nodes={nodes}\n                setNodes={setNodes}\n                question={questions[currentQuestion]}\n                table={table}\n                setTable={setTable}\n                filterYou={true}\n                currentQuestion={currentQuestion}\n              />\n              <ButtonFooter\n              onNext = {() => nextQuestion()}\n              onPrev = {() => prevQuestion()}\n              /> \n            </Box>\n          );\n        case \"dragndrop\":\n          return (\n            <Box id=\"case 3 box\" fill= \"vertical\">\n              <Text size=\"xxxlarge\" className=\"title\">\n                {questions[currentQuestion].getText()}\n              </Text>\n              <LineBox\n                nodes={nodes}\n                question={questions[currentQuestion]}\n                table={table}\n                setTable={setTable}\n                filterYou={false}\n                darkMode={darkMode}\n              />\n              <ButtonFooter\n              onNext = {() => dragNDropValidation(nextQuestion)}\n              onPrev = {() => dragNDropValidation(prevQuestion)}\n              /> \n            </Box>\n          );\n        case \"ladder\":\n          return (\n            <Box id=\"case 3 box\" fill= \"vertical\">\n              <Text size=\"xxxlarge\" className=\"title\">\n                {questions[currentQuestion].getText()}\n              </Text>\n              <Ladder\n                nodes={nodes}\n                question={questions[currentQuestion]}\n                table={table}\n                setTable={setTable}\n                filterYou={false}\n                darkMode={darkMode}\n              />\n              <ButtonFooter\n              onNext = {() => dragNDropValidation(nextQuestion)}\n              onPrev = {() => dragNDropValidation(prevQuestion)}\n              /> \n            </Box>\n          );\n        case \"mcq\":\n          return (\n            <Box id=\"case 3 box\" fill= \"vertical\">\n              <Text size=\"xxxlarge\" className=\"title\">\n                {questions[currentQuestion].getText()}\n              </Text>\n              <MCQ\n                node={nodes[0].getName()}\n                question={questions[currentQuestion]}\n                table={table}\n                setTable={setTable}\n                filterYou={false}\n              />\n              <ButtonFooter\n              onNext = {() => mcqValidation(nextQuestion)}\n              onPrev = {() => mcqValidation(prevQuestion)}\n              /> \n            </Box>\n          );\n        default:\n          (console.log('Question type not valid.', questions[currentQuestion]))\n      }\n}\n  return questionComponentSelector()\n  }"]},"metadata":{},"sourceType":"module"}