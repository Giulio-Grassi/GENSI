{"ast":null,"code":"var _jsxFileName = \"/Users/gg/dev/egoSurveyReact/egoSurveyReact/src/components/mcq.jsx\",\n    _s = $RefreshSig$();\n\n/**\n * component that handles a multiple choice question with an arbitrary number of choices. \n * Wraps around grommet RadioButtonGroup and provides yet another for the gensiForm\n */\nimport React, { useState, useEffect } from 'react';\nimport { Button, Text, Box, RadioButtonGroup } from \"grommet\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function MCQ({\n  titles //customValues, TODO implement cause right now we ust use the index \n\n}) {\n  _s();\n\n  const [value, setValue] = useState('');\n\n  function getQuestions() {\n    const questions = titles.map((title, i) => ({\n      label: `${title}`,\n      value: `${i}`\n    })); //const questions = titles.map((title, i)=> `${title} lollone` )\n\n    console.log(\"titles\", titles);\n    console.log(\"questions\", questions);\n    return questions;\n  }\n\n  const questions = titles.map((title, i) => ({\n    label: `${title}`,\n    value: `${i}`\n  })); //const questions = titles.map((title, i)=> `${title} lollone` )\n\n  console.log(\"titles\", titles);\n  console.log(\"questions\", questions);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    id: \"mcq page\",\n    align: \"center\",\n    pad: \"large\",\n    justify: \"center\",\n    align: \"center\",\n    fill: \"vertical\",\n    children: /*#__PURE__*/_jsxDEV(RadioButtonGroup, {\n      align: \"center\",\n      justify: \"center\",\n      name: \"radio\",\n      options: getQuestions(),\n      value: value,\n      onChange: event => setValue(event.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 13\n  }, this);\n}\n\n_s(MCQ, \"A2PXPeq8TepW328gUMM4+o8Xryo=\");\n\n_c = MCQ;\n\nvar _c;\n\n$RefreshReg$(_c, \"MCQ\");","map":{"version":3,"sources":["/Users/gg/dev/egoSurveyReact/egoSurveyReact/src/components/mcq.jsx"],"names":["React","useState","useEffect","Button","Text","Box","RadioButtonGroup","MCQ","titles","value","setValue","getQuestions","questions","map","title","i","label","console","log","event","target"],"mappings":";;;AAAA;AACA;AACA;AACA;AAEC,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,GAAvB,EAA4BC,gBAA5B,QAAmD,SAAnD;;AAED,eAAe,SAASC,GAAT,CAAa;AACxBC,EAAAA,MADwB,CAExB;;AAFwB,CAAb,EAGb;AAAA;;AACE,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,EAAD,CAAlC;;AAEA,WAASU,YAAT,GAAwB;AACpB,UAAMC,SAAS,GAAGJ,MAAM,CAACK,GAAP,CAAW,CAACC,KAAD,EAAQC,CAAR,MAAe;AAACC,MAAAA,KAAK,EAAG,GAAEF,KAAM,EAAjB;AAAoBL,MAAAA,KAAK,EAAI,GAAEM,CAAE;AAAjC,KAAf,CAAX,CAAlB,CADoB,CAEpB;;AAEAE,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBV,MAAtB;AACAS,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBN,SAAzB;AACA,WAAOA,SAAP;AACH;;AACG,QAAMA,SAAS,GAAGJ,MAAM,CAACK,GAAP,CAAW,CAACC,KAAD,EAAQC,CAAR,MAAe;AAACC,IAAAA,KAAK,EAAG,GAAEF,KAAM,EAAjB;AAAoBL,IAAAA,KAAK,EAAI,GAAEM,CAAE;AAAjC,GAAf,CAAX,CAAlB,CAXN,CAYM;;AAEAE,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBV,MAAtB;AACAS,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBN,SAAzB;AAEJ,sBACQ,QAAC,GAAD;AAAK,IAAA,EAAE,EAAC,UAAR;AAAmB,IAAA,KAAK,EAAC,QAAzB;AAAkC,IAAA,GAAG,EAAC,OAAtC;AAA8C,IAAA,OAAO,EAAC,QAAtD;AAA+D,IAAA,KAAK,EAAC,QAArE;AAA8E,IAAA,IAAI,EAAC,UAAnF;AAAA,2BACI,QAAC,gBAAD;AAAmB,MAAA,KAAK,EAAC,QAAzB;AAAkC,MAAA,OAAO,EAAC,QAA1C;AACI,MAAA,IAAI,EAAC,OADT;AAEI,MAAA,OAAO,EAAED,YAAY,EAFzB;AAGI,MAAA,KAAK,EAAEF,KAHX;AAII,MAAA,QAAQ,EAAEU,KAAK,IAAIT,QAAQ,CAACS,KAAK,CAACC,MAAN,CAAaX,KAAd;AAJ/B;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADR;AAUH;;GA9BuBF,G;;KAAAA,G","sourcesContent":["/**\n * component that handles a multiple choice question with an arbitrary number of choices. \n * Wraps around grommet RadioButtonGroup and provides yet another for the gensiForm\n */\n\n import React, { useState, useEffect } from 'react';\n import { Button, Text, Box, RadioButtonGroup} from \"grommet\";\n\nexport default function MCQ({\n    titles,\n    //customValues, TODO implement cause right now we ust use the index \n}){\n    const [value, setValue] = useState('');\n\n    function getQuestions (){\n        const questions = titles.map((title, i) => ({label: `${title}`, value:  `${i}` }))\n        //const questions = titles.map((title, i)=> `${title} lollone` )\n\n        console.log(\"titles\", titles)\n        console.log(\"questions\", questions)\n        return questions\n    }\n        const questions = titles.map((title, i) => ({label: `${title}`, value:  `${i}` }))\n        //const questions = titles.map((title, i)=> `${title} lollone` )\n\n        console.log(\"titles\", titles)\n        console.log(\"questions\", questions)\n\n    return(\n            <Box id=\"mcq page\" align=\"center\" pad=\"large\" justify=\"center\" align=\"center\" fill=\"vertical\" >\n                <RadioButtonGroup  align=\"center\" justify=\"center\" \n                    name=\"radio\"\n                    options={getQuestions()}\n                    value={value}\n                    onChange={event => setValue(event.target.value)}\n                />\n            </Box>\n    )\n}"]},"metadata":{},"sourceType":"module"}