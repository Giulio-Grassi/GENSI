{"ast":null,"code":"var _jsxFileName = \"/Users/gg/dev/egoSurveyReact/egoSurveyReact/src/components/nodeRow.jsx\",\n    _s = $RefreshSig$();\n\n/**\n * arranges the nodes in a row so it's possible to select them,\n * once a node is selected it bumps up and changes color\n */\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Box, DataTable, Button, Layer, Heading, TextInput } from \"grommet\";\nimport { select, forceSimulation, forceManyBody, forceCollide, forceCenter, tickFormat } from 'd3';\nimport useResizeObserver from './useResizeObserver';\nimport { forceLink } from 'd3-force';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function NodeRow({\n  initialNodes,\n  selectedIds,\n  setSelectedIds,\n  filterYou\n}) {\n  _s();\n\n  const CIRCLE_RADIUS = 30;\n  const [nodes, setNodes] = React.useState([]);\n  const [didInitialise, setDidInitialise] = React.useState(false);\n  const svgRef = useRef(); //gets a ref for the svg in which d3 renders in \n\n  const wrapperRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef); //used to resize \n  // will be called initially and on every data change\n\n  useEffect(() => {\n    if (!dimensions) return; // console.log(\"prefilter nodes \", nodes)\n    // if(filterYou && !didFilter){\n    //   //const filteredNodes = nodes.filter(e => e.id !=  \"You\") //removing you as we do not need it for this screen, TODO make it a var\n    //  setNodes(nodes.filter(e => e.id !=  \"You\"))\n    //  setDidFilter(true)\n    //  console.log(\"FILTERED\")\n    // }\n\n    if (!didInitialise) {\n      setDidFilter(true);\n      setNodes(...initialNodes);\n    }\n\n    console.log(\"postfilter nodes \", nodes);\n    console.log(\"initial nodes\", initialNodes);\n    const manualPadding = 100;\n    const nodeOffset = (dimensions.width - 2 * manualPadding) / nodes.length;\n    console.log(\"width\", dimensions.width);\n    const svg = select(svgRef.current); // centering workaround\n\n    svg.attr(\"viewBox\", [-dimensions.width / 2, -dimensions.height / 2, dimensions.width, dimensions.height]);\n    const node = svg.selectAll(\".node\").data(nodes).join(\"g\").attr('class', 'node') //.attr(\"x\", d => d.x = (-dimensions.width / 2  + manualPadding + nodeOffset/2 + d.index * nodeOffset))\n    //.attr(\"y\", d => d.y = 0)\n    //.attr(\"selected\", d => d.selected)\n    //.attr(\"transform\",d => `translate(${d.x}, ${d.y})`)\n    .on(\"mouseover\", handleMouseOver).on(\"mouseout\", handleMouseOut).on(\"click\", handleMouseClick);\n    node.append('circle') //.join(\"g\")\n    .attr(\"r\", CIRCLE_RADIUS).attr(\"fill\", function (d) {\n      return '#5b8075';\n    });\n    node.append(\"text\") //.join(\"g\")\n    .text(d => d.id).attr('text-anchor', 'middle').attr('alignment-baseline', 'middle').style('fill', '#000').style('font-size', '20px');\n\n    function handleMouseClick(d, i) {\n      console.log(\"clicked\"); // nodes[this.index].selected = true\n\n      setSelectedIds( //nodes[i.index].selected = true  //THIS IS FAULTY \n      selectedIds.add(nodes[i.index]));\n      console.log(\"clicked nodes\", nodes);\n      console.log(\"indexed node\", nodes[i.index]);\n      console.log(d);\n    } // Create Event Handlers for mouse\n\n\n    function handleMouseOver(d, i) {\n      // Add interactivity\n      select(this).selectChild('circle') //select circle at mouseposition... otherwise label gets in the way\n      .transition().attr(\"fill\", function (d) {\n        return '#ffa500';\n      }).attr(\"r\", CIRCLE_RADIUS * 1.5);\n    }\n\n    function handleMouseOut(d, i) {\n      // Use D3 to select element, change color back to normal\n      select(this).selectChild('circle').transition().attr(\"r\", CIRCLE_RADIUS).attr(\"fill\", function (d) {\n        return '#5b8075';\n      });\n    } //   node.checked = function (val) { https://bl.ocks.org/Lulkafe/c77a36d5efb603e788b03eb749a4a714\n    //     if(val === undefined) {\n    //         return checked;    //     } else {\n    //         checked = val;\n    //         return checkBox;\n    //     }\n    // }\n    //more than having the simulation, just have the posittions in the state?\n\n\n    const simulation = forceSimulation(nodes);\n    simulation.on(\"tick\", () => {\n      node //  // .attr(\"x\", d => (d.index * nodeOffset) + manualPadding - ( -dimensions.width / 2))\n      //   //.attr(\"transform\", d => `translate(${ -((d.index * nodeOffset) + manualPadding - (dimensions.width / 2))}, ${d.selected ? d.y : 100 })`);\n      .attr(\"transform\", d => `translate(${d.x = -dimensions.width / 2 + manualPadding + nodeOffset / 2 + d.index * nodeOffset}, ${d.selected ? d.y = 0 : d.y = 100})`); //console.log(\"simulation nodes \", nodes)\n    });\n  }, [nodes, dimensions]); //TODO check if this nodes param here is right and what it does...\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    fill: true,\n    ref: wrapperRef,\n    pad: \"small\",\n    height: \"xxlarge\",\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: svgRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 21\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 17\n  }, this);\n}\n\n_s(NodeRow, \"wqmGPWV4DH/BeRnx6bbjibbROA0=\", false, function () {\n  return [useResizeObserver];\n});\n\n_c = NodeRow;\n\nvar _c;\n\n$RefreshReg$(_c, \"NodeRow\");","map":{"version":3,"sources":["/Users/gg/dev/egoSurveyReact/egoSurveyReact/src/components/nodeRow.jsx"],"names":["React","useState","useEffect","useRef","Box","DataTable","Button","Layer","Heading","TextInput","select","forceSimulation","forceManyBody","forceCollide","forceCenter","tickFormat","useResizeObserver","forceLink","NodeRow","initialNodes","selectedIds","setSelectedIds","filterYou","CIRCLE_RADIUS","nodes","setNodes","didInitialise","setDidInitialise","svgRef","wrapperRef","dimensions","setDidFilter","console","log","manualPadding","nodeOffset","width","length","svg","current","attr","height","node","selectAll","data","join","on","handleMouseOver","handleMouseOut","handleMouseClick","append","d","text","id","style","i","add","index","selectChild","transition","simulation","x","selected","y"],"mappings":"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","sourcesContent":["/**\n * arranges the nodes in a row so it's possible to select them,\n * once a node is selected it bumps up and changes color\n */\n\n import React, { useState, useEffect, useRef} from 'react';\n import { Box, DataTable, Button, Layer, Heading, TextInput } from \"grommet\";\nimport {select, forceSimulation, forceManyBody, forceCollide, forceCenter, tickFormat,} from 'd3'\nimport useResizeObserver from './useResizeObserver'\nimport { forceLink } from 'd3-force';\n\n\nexport default function NodeRow({\n     initialNodes,\n     selectedIds,\n     setSelectedIds,\n    filterYou\n    }) {\n    const CIRCLE_RADIUS = 30;\n    const [nodes, setNodes] = React.useState([]);\n    const [didInitialise, setDidInitialise] = React.useState(false);\n    const svgRef = useRef(); //gets a ref for the svg in which d3 renders in \n    const wrapperRef = useRef();\n    const dimensions = useResizeObserver(wrapperRef); //used to resize \n\n\n      // will be called initially and on every data change\n    useEffect(() => {\n      if (!dimensions) return;\n\n      // console.log(\"prefilter nodes \", nodes)\n      // if(filterYou && !didFilter){\n      //   //const filteredNodes = nodes.filter(e => e.id !=  \"You\") //removing you as we do not need it for this screen, TODO make it a var\n       \n      //  setNodes(nodes.filter(e => e.id !=  \"You\"))\n      //  setDidFilter(true)\n      //  console.log(\"FILTERED\")\n       \n      // }\n      if(!didInitialise){\n        setDidFilter(true);\n        setNodes(...initialNodes)\n      }\n      console.log(\"postfilter nodes \", nodes)\n      console.log (\"initial nodes\", initialNodes )\n\n\n        const manualPadding = 100\n        const nodeOffset = (dimensions.width - 2* manualPadding)/ nodes.length\n        console.log(\"width\", dimensions.width)\n        \n        const svg = select(svgRef.current);\n\n            // centering workaround\n    svg.attr(\"viewBox\", [\n        -dimensions.width / 2,\n        -dimensions.height / 2,\n        dimensions.width,\n        dimensions.height\n      ]);\n\n  const node = svg\n      .selectAll(\".node\")\n      .data(nodes)\n      .join(\"g\")\n      .attr('class', 'node')\n      //.attr(\"x\", d => d.x = (-dimensions.width / 2  + manualPadding + nodeOffset/2 + d.index * nodeOffset))\n      //.attr(\"y\", d => d.y = 0)\n      //.attr(\"selected\", d => d.selected)\n      //.attr(\"transform\",d => `translate(${d.x}, ${d.y})`)\n      .on(\"mouseover\", handleMouseOver)\n      .on(\"mouseout\", handleMouseOut)\n      .on(\"click\", handleMouseClick);\n\n\n  node.append('circle')\n      //.join(\"g\")\n      .attr(\"r\", CIRCLE_RADIUS)\n      .attr(\"fill\", function (d) { return '#5b8075'; });  \n\n\n  node.append(\"text\")\n      //.join(\"g\")\n      .text(d => d.id)\n      .attr('text-anchor', 'middle')\n      .attr('alignment-baseline', 'middle')\n      .style('fill', '#000')\n      .style('font-size', '20px');\n\n    \n      function handleMouseClick(d, i){\n\n        console.log(\"clicked\")\n        // nodes[this.index].selected = true\n        setSelectedIds(\n          //nodes[i.index].selected = true  //THIS IS FAULTY \n          selectedIds.add(nodes[i.index])\n        )\n        console.log(\"clicked nodes\", nodes)\n        console.log(\"indexed node\", nodes[i.index])\n        console.log(d);\n      }\n      // Create Event Handlers for mouse\n      function handleMouseOver(d, i) {  // Add interactivity\n\n        select(this).selectChild('circle') //select circle at mouseposition... otherwise label gets in the way\n        .transition()\n        .attr(\"fill\", function (d) { return '#ffa500'; })\n        .attr(\"r\", CIRCLE_RADIUS *1.5)\n      }\n\n  function handleMouseOut(d, i) {\n        // Use D3 to select element, change color back to normal\n        select(this).selectChild('circle')\n        .transition()\n        .attr(\"r\", CIRCLE_RADIUS)\n        .attr(\"fill\", function (d) { return '#5b8075'; })\n      }\n\n\n    //   node.checked = function (val) { https://bl.ocks.org/Lulkafe/c77a36d5efb603e788b03eb749a4a714\n\n    //     if(val === undefined) {\n    //         return checked;    //     } else {\n    //         checked = val;\n    //         return checkBox;\n    //     }\n    // }\n\n      //more than having the simulation, just have the posittions in the state?\n      \n      const simulation = forceSimulation(nodes)\n\n      simulation.on(\"tick\", () => {\n         node\n      //  // .attr(\"x\", d => (d.index * nodeOffset) + manualPadding - ( -dimensions.width / 2))\n      //   //.attr(\"transform\", d => `translate(${ -((d.index * nodeOffset) + manualPadding - (dimensions.width / 2))}, ${d.selected ? d.y : 100 })`);\n         .attr(\"transform\", d => `translate(${d.x = (-dimensions.width / 2  + manualPadding + nodeOffset/2 + d.index * nodeOffset)}, ${d.selected ? d.y = 0 : d.y = 100 })`);\n\n        //console.log(\"simulation nodes \", nodes)\n      });\n      }, [nodes, dimensions]); //TODO check if this nodes param here is right and what it does...\n\n        return( \n                <Box fill={true} ref={wrapperRef}  pad=\"small\" height=\"xxlarge\">\n                    <svg ref={svgRef}></svg>\n                </Box>\n        )\n}"]},"metadata":{},"sourceType":"module"}