{"ast":null,"code":"var _jsxFileName = \"/Users/gg/dev/egoSurveyReact/egoSurveyReact/src/components/nodeCreationFunction.jsx\",\n    _s = $RefreshSig$();\n\n/**\n * TODO add a garbage bin in case of an incorrect node or just like a double click to delete\n */\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Box, DataTable, Button, Layer, Heading, TextInput } from \"grommet\";\nimport { select, forceSimulation, forceManyBody, forceCollide, forceCenter } from 'd3';\nimport useResizeObserver from './useResizeObserver';\nimport { forceLink } from 'd3-force';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function NodeCreationPage({\n  nodes,\n  links,\n  onNodeCreation //callback that gets triggered when the button confirm name button is pressed and a new node should be added\n\n}) {\n  _s();\n\n  const [nodeName, setNodeName] = React.useState('');\n  const svgRef = useRef(); //gets a ref for the svg in which d3 renders in \n\n  const wrapperRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef); //used to resize \n  // will be called initially and on every data change\n\n  useEffect(() => {\n    console.log(\"current dimension \", dimensions);\n    if (!dimensions) return; // console.log(\"current nodes \", nodes)\n    // console.log(\"current links \", links)\n\n    const svg = select(svgRef.current); // centering workaround\n\n    svg.attr(\"viewBox\", [-dimensions.width / 2, -dimensions.height / 2, dimensions.width, dimensions.height]);\n    const link = svg.attr(\"stroke\", \"#999\").attr(\"stroke-opacity\", 0.6).selectAll(\"line\").data(links).join(\"line\").attr(\"stroke-width\", d => Math.sqrt(d.value));\n    const node = svg.selectAll(\".node\").data(nodes).join(\"g\").attr('class', 'node');\n    node.append('circle').join(\"g\").attr(\"r\", 30).attr(\"fill\", function (d) {\n      return '#5b8075';\n    });\n    node.append(\"text\").text(d => d.id).attr('text-anchor', 'middle').attr('alignment-baseline', 'middle').style('fill', '#000').style('font-size', '20px');\n    const simulation = forceSimulation(nodes).force(\"charge\", forceManyBody().strength(-10)).force(\"collide\", forceCollide(80)) // .force(\"center\", forceCenter())\n    .force(\"link\", forceLink(links));\n    simulation.on(\"tick\", () => {\n      link.attr(\"x1\", d => d.source.x).attr(\"y1\", d => d.source.y).attr(\"x2\", d => d.target.x).attr(\"y2\", d => d.target.y);\n      node.attr(\"transform\", d => `translate(${d.x}, ${d.y})`);\n    });\n  }, [nodes, links, dimensions]); //TODO check if this nodes param here is right and what it does...\n\n  function createNode() {\n    onNodeCreation(nodeName);\n    setNodeName('');\n  }\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    id: \"nodeCreation box\",\n    fill: \"vertical\",\n    children: [/*#__PURE__*/_jsxDEV(TextInput, {\n      placeholder: \"type here\",\n      value: nodeName,\n      onChange: event => setNodeName(event.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      primary: true,\n      label: \"Confirm Name\",\n      onClick: () => createNode()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      id: \"SVG wrap\",\n      fill: true,\n      ref: wrapperRef,\n      pad: \"small\",\n      height: \"xxlarge\",\n      children: /*#__PURE__*/_jsxDEV(\"svg\", {\n        ref: svgRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 9\n  }, this);\n}\n\n_s(NodeCreationPage, \"0vsnvMoMHn+mRXOKnNzFaKk1+YU=\", false, function () {\n  return [useResizeObserver];\n});\n\n_c = NodeCreationPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"NodeCreationPage\");","map":{"version":3,"sources":["/Users/gg/dev/egoSurveyReact/egoSurveyReact/src/components/nodeCreationFunction.jsx"],"names":["React","useState","useEffect","useRef","Box","DataTable","Button","Layer","Heading","TextInput","select","forceSimulation","forceManyBody","forceCollide","forceCenter","useResizeObserver","forceLink","NodeCreationPage","nodes","links","onNodeCreation","nodeName","setNodeName","svgRef","wrapperRef","dimensions","console","log","svg","current","attr","width","height","link","selectAll","data","join","d","Math","sqrt","value","node","append","text","id","style","simulation","force","strength","on","source","x","y","target","createNode","event"],"mappings":"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","sourcesContent":["/**\n * TODO add a garbage bin in case of an incorrect node or just like a double click to delete\n */\n import React, { useState, useEffect, useRef} from 'react';\n import { Box, DataTable, Button, Layer, Heading, TextInput } from \"grommet\";\nimport {select, forceSimulation, forceManyBody, forceCollide, forceCenter,} from 'd3'\nimport useResizeObserver from './useResizeObserver'\nimport { forceLink } from 'd3-force';\n\n\nexport default function NodeCreationPage({\n    nodes,\n    links,\n    onNodeCreation,//callback that gets triggered when the button confirm name button is pressed and a new node should be added\n}) {\n\n    const [nodeName, setNodeName] = React.useState('');\n\n    const svgRef = useRef(); //gets a ref for the svg in which d3 renders in \n    const wrapperRef = useRef();\n    const dimensions = useResizeObserver(wrapperRef); //used to resize \n\n\n      // will be called initially and on every data change\n    useEffect(() => {\n      console.log(\"current dimension \", dimensions)\n\n        if (!dimensions) return;\n        // console.log(\"current nodes \", nodes)\n        // console.log(\"current links \", links)\n\n        const svg = select(svgRef.current);\n\n            // centering workaround\n    svg.attr(\"viewBox\", [\n        -dimensions.width / 2,\n        -dimensions.height / 2,\n        dimensions.width,\n        dimensions.height\n      ]);\n\n  const link = svg\n      .attr(\"stroke\", \"#999\")\n      .attr(\"stroke-opacity\", 0.6)\n      .selectAll(\"line\")\n      .data(links)\n      .join(\"line\")\n      .attr(\"stroke-width\", d => Math.sqrt(d.value));\n\n  const node = svg\n      .selectAll(\".node\")\n      .data(nodes)\n      .join(\"g\")\n      .attr('class', 'node')\n\n  node.append('circle')\n      .join(\"g\")\n      .attr(\"r\", 30)\n      .attr(\"fill\", function (d) { return '#5b8075'; })  \n\n\n  node.append(\"text\")\n      .text(d => d.id)\n      .attr('text-anchor', 'middle')\n      .attr('alignment-baseline', 'middle')\n      .style('fill', '#000')\n      .style('font-size', '20px')\n      \n\n      const simulation = forceSimulation(nodes)\n      .force(\"charge\", forceManyBody().strength(-10))\n      .force(\"collide\", forceCollide(80))\n      // .force(\"center\", forceCenter())\n      .force(\"link\", forceLink(links))\n\n  simulation.on(\"tick\", () => {\n    link\n        .attr(\"x1\", d => d.source.x)\n        .attr(\"y1\", d => d.source.y)\n        .attr(\"x2\", d => d.target.x)\n        .attr(\"y2\", d => d.target.y);\n\n    node\n        .attr(\"transform\", d => `translate(${d.x}, ${d.y})`);\n  });\n\n      }, [nodes, links, dimensions]); //TODO check if this nodes param here is right and what it does...\n\n\n    function createNode() {\n        onNodeCreation(nodeName);\n        setNodeName('');\n    }\n\n\n        return( \n        <Box id=\"nodeCreation box\" fill= \"vertical\">\n                <TextInput\n                placeholder=\"type here\"\n                value={nodeName}\n                onChange={event => setNodeName(event.target.value)}\n                />\n\n                <Button primary label=\"Confirm Name\"\n                onClick={() => createNode()} />\n\n            <Box id=\"SVG wrap\" fill={true} ref={wrapperRef}  pad=\"small\" height=\"xxlarge\">\n                <svg ref={svgRef}></svg>\n            </Box>\n        </Box>\n        )\n \n}"]},"metadata":{},"sourceType":"module"}