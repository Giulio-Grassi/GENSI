{"ast":null,"code":"var _jsxFileName = \"/Users/gg/dev/egoSurveyReact/egoSurveyReact/src/components/dragDrop/lineBox.jsx\",\n    _s = $RefreshSig$();\n\n/**\n * arranges the nodes in a row so it's possible to select them,\n * once a node is selected it bumps up and changes color\n */\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Box, DataTable, Button, Text, Layer, Heading, TextInput } from \"grommet\";\nimport { select, drag, forceSimulation, forceManyBody, forceCollide, forceCenter, tickFormat } from 'd3';\nimport useResizeObserver from '../useResizeObserver';\nimport { forceLink } from 'd3-force';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function LineBox({\n  nodes\n}) {\n  _s();\n\n  const CIRCLE_RADIUS = 30;\n  const svgRef = useRef(); //gets a ref for the svg in which d3 renders in \n\n  const wrapperRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef); //used to resize \n\n  const [nodesRepresentation, setNodesRepresentation] = React.useState(nodes.map(x => {\n    return {\n      id: x.getName(),\n      selected: false\n    };\n  })); // will be called initially and on every data change\n\n  useEffect(() => {\n    if (!dimensions) return;\n    const manualPadding = 100;\n    const nodeOffset = (dimensions.width - 2 * manualPadding) / nodesRepresentation.length;\n    console.log(\"width\", dimensions.width);\n    const svg = select(svgRef.current); // svg.selectAll(\"*\").remove(); //Clear canvas so no duplicates are trailed every refresh\n    // centering workaround\n\n    svg.attr(\"viewBox\", [-dimensions.width / 2, -dimensions.height / 2, dimensions.width, dimensions.height]);\n    const node = svg.selectAll(\".node\").data(nodesRepresentation).join(\"g\").attr('class', 'node').attr(\"transform\", (d, i) => `translate(${d.x = -dimensions.width / 2 + manualPadding + nodeOffset / 2 + i * nodeOffset}, ${d.selected ? d.y = 0 : d.y = 100})`) //  .on(\"mouseover\", handleMouseOver)\n    //.on(\"mouseout\", handleMouseOut)\n    // .on(\"click\", handleMouseClick);\n    .call(drag().on(\"start\", dragstarted).on(\"drag\", dragged).on(\"end\", dragended));\n    node.append('circle') //.join(\"g\")\n    .attr(\"r\", CIRCLE_RADIUS).attr(\"fill\", function (d) {\n      return '#5b8075';\n    });\n    node.append(\"text\") //.join(\"g\")\n    .text(d => d.id).attr('text-anchor', 'middle').attr('alignment-baseline', 'middle').style('fill', '#000').style('font-size', '20px');\n\n    function dragstarted(event, d) {\n      select(this).raise().attr(\"stroke\", \"black\");\n    }\n\n    function dragged(event, d) {\n      select(this).attr(\"cx\", d.x = event.x).attr(\"cy\", d.y = event.y);\n    }\n\n    function dragended(event, d) {\n      select(this).attr(\"stroke\", null);\n    }\n\n    function handleMouseClick(d, i) {\n      console.log(\"clicked\"); // nodes[this.index].selected = true\n\n      var name = nodesRepresentation[i.index].id; //enforce node name uniqueness to make this bulletproof\n\n      setNodesRepresentation(nodesRepresentation.map(x => {\n        if (x.id === name) {\n          var y = x;\n          y.selected = !y.selected;\n          return y;\n        } else {\n          return x;\n        }\n      }));\n    }\n\n    const simulation = forceSimulation(nodesRepresentation);\n    simulation.on(\"tick\", () => {//  // .attr(\"x\", d => (d.index * nodeOffset) + manualPadding - ( -dimensions.width / 2))\n      //   //.attr(\"transform\", d => `translate(${ -((d.index * nodeOffset) + manualPadding - (dimensions.width / 2))}, ${d.selected ? d.y : 100 })`);\n      //console.log(\"simulation nodes \", nodes)\n    });\n  }, [nodesRepresentation, dimensions]); //TODO check if this nodes param here is right and what it does...\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    fill: true,\n    ref: wrapperRef,\n    pad: \"small\",\n    height: \"xxlarge\",\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: svgRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 21\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 17\n  }, this);\n}\n\n_s(LineBox, \"A37/+amAD4FyFwe8htcKY1i7DLo=\", false, function () {\n  return [useResizeObserver];\n});\n\n_c = LineBox;\n\nvar _c;\n\n$RefreshReg$(_c, \"LineBox\");","map":{"version":3,"sources":["/Users/gg/dev/egoSurveyReact/egoSurveyReact/src/components/dragDrop/lineBox.jsx"],"names":["React","useState","useEffect","useRef","Box","DataTable","Button","Text","Layer","Heading","TextInput","select","drag","forceSimulation","forceManyBody","forceCollide","forceCenter","tickFormat","useResizeObserver","forceLink","LineBox","nodes","CIRCLE_RADIUS","svgRef","wrapperRef","dimensions","nodesRepresentation","setNodesRepresentation","map","x","id","getName","selected","manualPadding","nodeOffset","width","length","console","log","svg","current","attr","height","node","selectAll","data","join","d","i","y","call","on","dragstarted","dragged","dragended","append","text","style","event","raise","handleMouseClick","name","index","simulation"],"mappings":"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","sourcesContent":["/**\n * arranges the nodes in a row so it's possible to select them,\n * once a node is selected it bumps up and changes color\n */\n\n import React, { useState, useEffect, useRef} from 'react';\n import { Box, DataTable, Button, Text, Layer, Heading, TextInput } from \"grommet\";\nimport {select, drag, forceSimulation, forceManyBody, forceCollide, forceCenter, tickFormat,} from 'd3'\nimport useResizeObserver from '../useResizeObserver'\nimport { forceLink } from 'd3-force';\n\n\nexport default function LineBox({\n     nodes,\n    }) {\n    const CIRCLE_RADIUS = 30;\n    const svgRef = useRef(); //gets a ref for the svg in which d3 renders in \n    const wrapperRef = useRef();\n    const dimensions = useResizeObserver(wrapperRef); //used to resize \n    const [nodesRepresentation, setNodesRepresentation] = React.useState(nodes.map(x => {\n      return {\n        id: x.getName(),\n        selected: false\n      }\n    }))\n\n\n      // will be called initially and on every data change\n    useEffect(() => {\n      if (!dimensions) return;\n\n        const manualPadding = 100\n        const nodeOffset = (dimensions.width - 2* manualPadding)/ nodesRepresentation.length\n        console.log(\"width\", dimensions.width)\n        \n        const svg = select(svgRef.current);\n        // svg.selectAll(\"*\").remove(); //Clear canvas so no duplicates are trailed every refresh\n            // centering workaround\n    svg.attr(\"viewBox\", [\n        -dimensions.width / 2,\n        -dimensions.height / 2,\n        dimensions.width,\n        dimensions.height\n      ]);\n\n  const node = svg\n      .selectAll(\".node\")\n      .data(nodesRepresentation)\n      .join(\"g\")\n      .attr('class', 'node')\n      .attr(\"transform\", (d,i) => `translate(${d.x = (-dimensions.width / 2  + manualPadding + nodeOffset/2 + i * nodeOffset)}, ${d.selected ? d.y = 0 : d.y = 100 })`)\n    //  .on(\"mouseover\", handleMouseOver)\n      //.on(\"mouseout\", handleMouseOut)\n     // .on(\"click\", handleMouseClick);\n      .call(drag()\n            .on(\"start\", dragstarted)\n            .on(\"drag\", dragged)\n            .on(\"end\", dragended));\n\n\n  node.append('circle')\n      //.join(\"g\")\n      .attr(\"r\", CIRCLE_RADIUS)\n      .attr(\"fill\", function (d) { return '#5b8075'; });  \n\n\n  node.append(\"text\")\n      //.join(\"g\")\n      .text(d => d.id)\n      .attr('text-anchor', 'middle')\n      .attr('alignment-baseline', 'middle')\n      .style('fill', '#000')\n      .style('font-size', '20px');\n\n\n\n        function dragstarted(event, d) {\n          select(this).raise().attr(\"stroke\", \"black\");\n        }\n      \n        function dragged(event, d) {\n          select(this).attr(\"cx\", d.x = event.x).attr(\"cy\", d.y = event.y);\n        }\n      \n        function dragended(event, d) {\n          select(this).attr(\"stroke\", null);\n        }\n      \n\n      \n      function handleMouseClick(d, i){\n\n        console.log(\"clicked\")\n        // nodes[this.index].selected = true\n        var name = nodesRepresentation[i.index].id //enforce node name uniqueness to make this bulletproof\n        setNodesRepresentation(\n          nodesRepresentation.map(x => {\n            if(x.id === name){\n              var y = x\n              y.selected = !y.selected\n              return y\n            }\n            else{\n              return x\n            }\n          })\n        )\n      }\n\n      \n      const simulation = forceSimulation(nodesRepresentation)\n\n      simulation.on(\"tick\", () => {\n         \n      //  // .attr(\"x\", d => (d.index * nodeOffset) + manualPadding - ( -dimensions.width / 2))\n      //   //.attr(\"transform\", d => `translate(${ -((d.index * nodeOffset) + manualPadding - (dimensions.width / 2))}, ${d.selected ? d.y : 100 })`);\n         \n\n        //console.log(\"simulation nodes \", nodes)\n      });\n      }, [nodesRepresentation, dimensions]); //TODO check if this nodes param here is right and what it does...\n\n        return(\n                <Box fill={true} ref={wrapperRef}  pad=\"small\" height=\"xxlarge\">\n                    <svg ref={svgRef}></svg>\n                </Box>\n        )\n}"]},"metadata":{},"sourceType":"module"}