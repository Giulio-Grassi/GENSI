{"ast":null,"code":"var _jsxFileName = \"/Users/gg/dev/egoSurveyReact/egoSurveyReact/src/components/questionStrategy.jsx\",\n    _s = $RefreshSig$();\n\n/**\n * This components handles the top level state of the form that we will ultimately submit.\n * This component is basically the entry point of the GENSI application\n * Every \"page\" saves their state in this parent component.\n * This is a simple multi-page form architecture. \n */\nimport React, { Component } from 'react';\nimport ParagraphPage from './paragraphPage';\nimport NodeCreationFunction from './nodeCreationFunction';\nimport ButtonFooter from './buttonFooter';\nimport { Box } from 'grommet';\nimport { Node } from './models/node';\nimport { Table } from './models/table';\nimport { Question } from './models/question';\nimport { Text } from \"grommet\";\nimport NodeRow from './nodeRow';\nimport LineBox from './lineBox';\nimport Ladder from './ladder';\nimport MCQ from './mcq';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function QuestionStrategy({\n  nodes,\n  questions,\n  table,\n  setTable,\n  superNext\n}) {\n  _s();\n\n  const [currentQuestion, setCurrentQuestion] = React.useState(0);\n\n  function nextQuestion() {\n    if (currentQuestion < questions.length - 1) {\n      setCurrentQuestion(currentQuestion + 1);\n    } else {\n      superNext();\n    }\n  }\n\n  function prevQuestion() {\n    if (currentQuestion > 0) {\n      setCurrentQuestion(currentQuestion - 1);\n    }\n  }\n\n  function dragNDropValidation(buttonCallback) {\n    let valid = true;\n    let i = 0;\n\n    while (valid && i < nodes.length) {\n      //table.getRelation(question.id, x.id)\n      if (table.getRelation(questions[currentQuestion].getId(), nodes[i].getName())[0][2] === false) {\n        valid = false;\n      }\n\n      i++;\n    }\n\n    valid ? buttonCallback() : alert(\"Please put all the nodes in a box before changing page.\");\n  }\n\n  function mcqValidation(buttonCallback) {\n    let valid = true;\n\n    if (table.getRelation(questions[currentQuestion].getId(), nodes[0].getName())[0][2] === false) {\n      valid = false;\n    }\n\n    valid ? buttonCallback() : alert(\"please select an option before proceeding\");\n  }\n\n  function questionComponentSelector() {\n    switch (questions[currentQuestion].getType()) {\n      case \"select\":\n        return /*#__PURE__*/_jsxDEV(Box, {\n          id: \"case 3 box\",\n          fill: \"vertical\",\n          children: [/*#__PURE__*/_jsxDEV(Text, {\n            alignSelf: \"center\",\n            size: \"xxlarge\",\n            children: questions[currentQuestion].getText()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(NodeRow, {\n            nodes: nodes,\n            question: questions[currentQuestion],\n            table: table,\n            setTable: setTable,\n            filterYou: true,\n            currentQuestion: currentQuestion\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(ButtonFooter, {\n            onNext: () => nextQuestion(),\n            onPrev: () => prevQuestion()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 13\n        }, this);\n\n      case \"dragndrop\":\n        return /*#__PURE__*/_jsxDEV(Box, {\n          id: \"case 3 box\",\n          fill: \"vertical\",\n          children: [/*#__PURE__*/_jsxDEV(Text, {\n            alignSelf: \"center\",\n            size: \"xxlarge\",\n            children: questions[currentQuestion].getText()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(LineBox, {\n            nodes: nodes,\n            question: questions[currentQuestion],\n            table: table,\n            setTable: setTable,\n            filterYou: false\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(ButtonFooter, {\n            onNext: () => dragNDropValidation(nextQuestion),\n            onPrev: () => dragNDropValidation(prevQuestion)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 13\n        }, this);\n\n      case \"ladder\":\n        return /*#__PURE__*/_jsxDEV(Box, {\n          id: \"case 3 box\",\n          fill: \"vertical\",\n          children: [/*#__PURE__*/_jsxDEV(Text, {\n            alignSelf: \"center\",\n            size: \"xxlarge\",\n            children: questions[currentQuestion].getText()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Ladder, {\n            nodes: nodes,\n            question: questions[currentQuestion],\n            table: table,\n            setTable: setTable,\n            filterYou: false\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(ButtonFooter, {\n            onNext: () => nextQuestionValidationDragndrop(),\n            onPrev: () => prevQuestionValidationDragndrop()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 15\n        }, this);\n\n      case \"mcq\":\n        return /*#__PURE__*/_jsxDEV(Box, {\n          id: \"case 3 box\",\n          fill: \"vertical\",\n          children: [/*#__PURE__*/_jsxDEV(Text, {\n            alignSelf: \"center\",\n            size: \"xxlarge\",\n            children: questions[currentQuestion].getText()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(MCQ, {\n            node: nodes[0].getName(),\n            question: questions[currentQuestion],\n            table: table,\n            setTable: setTable,\n            filterYou: false\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(ButtonFooter, {\n            onNext: () => mcqValidation(nextQuestion),\n            onPrev: () => mcqValidation(prevQuestion)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 15\n        }, this);\n\n      default:\n        console.log('Question type not valid.', questions[currentQuestion]);\n    }\n  }\n\n  return questionComponentSelector();\n}\n\n_s(QuestionStrategy, \"9OM438k1WhEIHDwFF7YsuyU6VEk=\");\n\n_c = QuestionStrategy;\n\nvar _c;\n\n$RefreshReg$(_c, \"QuestionStrategy\");","map":{"version":3,"sources":["/Users/gg/dev/egoSurveyReact/egoSurveyReact/src/components/questionStrategy.jsx"],"names":["React","Component","ParagraphPage","NodeCreationFunction","ButtonFooter","Box","Node","Table","Question","Text","NodeRow","LineBox","Ladder","MCQ","QuestionStrategy","nodes","questions","table","setTable","superNext","currentQuestion","setCurrentQuestion","useState","nextQuestion","length","prevQuestion","dragNDropValidation","buttonCallback","valid","i","getRelation","getId","getName","alert","mcqValidation","questionComponentSelector","getType","getText","nextQuestionValidationDragndrop","prevQuestionValidationDragndrop","console","log"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,oBAAP,MAAiC,wBAAjC;AAEA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,SAASC,GAAT,QAAoB,SAApB;AACA,SAASC,IAAT,QAAqB,eAArB;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,SAASC,QAAT,QAAyB,mBAAzB;AACA,SAASC,IAAT,QAAqB,SAArB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,GAAP,MAAgB,OAAhB;;AAGA,eAAe,SAASC,gBAAT,CAA0B;AACvCC,EAAAA,KADuC;AAEvCC,EAAAA,SAFuC;AAGvCC,EAAAA,KAHuC;AAIvCC,EAAAA,QAJuC;AAKvCC,EAAAA;AALuC,CAA1B,EAMb;AAAA;;AAEA,QAAM,CAACC,eAAD,EAAkBC,kBAAlB,IAAwCrB,KAAK,CAACsB,QAAN,CAAe,CAAf,CAA9C;;AAEA,WAASC,YAAT,GAAuB;AACrB,QAAGH,eAAe,GAAGJ,SAAS,CAACQ,MAAV,GAAiB,CAAtC,EAAwC;AACtCH,MAAAA,kBAAkB,CAACD,eAAe,GAAC,CAAjB,CAAlB;AACD,KAFD,MAGI;AACFD,MAAAA,SAAS;AACV;AACF;;AAED,WAASM,YAAT,GAAuB;AACrB,QAAGL,eAAe,GAAG,CAArB,EAAuB;AACrBC,MAAAA,kBAAkB,CAACD,eAAe,GAAC,CAAjB,CAAlB;AACD;AACF;;AAGD,WAASM,mBAAT,CAA6BC,cAA7B,EAA4C;AAC1C,QAAIC,KAAK,GAAG,IAAZ;AACA,QAAIC,CAAC,GAAG,CAAR;;AACA,WAAMD,KAAK,IAAIC,CAAC,GAAGd,KAAK,CAACS,MAAzB,EAAgC;AAC9B;AACA,UAAGP,KAAK,CAACa,WAAN,CAAkBd,SAAS,CAACI,eAAD,CAAT,CAA2BW,KAA3B,EAAlB,EAAsDhB,KAAK,CAACc,CAAD,CAAL,CAASG,OAAT,EAAtD,EAA0E,CAA1E,EAA6E,CAA7E,MAAoF,KAAvF,EAA6F;AAC3FJ,QAAAA,KAAK,GAAG,KAAR;AACD;;AACDC,MAAAA,CAAC;AACF;;AAEDD,IAAAA,KAAK,GAAED,cAAc,EAAhB,GAAqBM,KAAK,CAAC,yDAAD,CAA/B;AACD;;AAED,WAASC,aAAT,CAAuBP,cAAvB,EAAsC;AACpC,QAAIC,KAAK,GAAG,IAAZ;;AACA,QAAGX,KAAK,CAACa,WAAN,CAAkBd,SAAS,CAACI,eAAD,CAAT,CAA2BW,KAA3B,EAAlB,EAAsDhB,KAAK,CAAC,CAAD,CAAL,CAASiB,OAAT,EAAtD,EAA0E,CAA1E,EAA6E,CAA7E,MAAoF,KAAvF,EAA6F;AACzFJ,MAAAA,KAAK,GAAG,KAAR;AACH;;AACAA,IAAAA,KAAD,GAASD,cAAc,EAAvB,GAA4BM,KAAK,CAAC,2CAAD,CAAjC;AACD;;AAED,WAASE,yBAAT,GAAoC;AAClC,YAAQnB,SAAS,CAACI,eAAD,CAAT,CAA2BgB,OAA3B,EAAR;AACI,WAAK,QAAL;AACE,4BACE,QAAC,GAAD;AAAK,UAAA,EAAE,EAAC,YAAR;AAAqB,UAAA,IAAI,EAAE,UAA3B;AAAA,kCACE,QAAC,IAAD;AACgB,YAAA,SAAS,EAAG,QAD5B;AAEgB,YAAA,IAAI,EAAG,SAFvB;AAAA,sBAGIpB,SAAS,CAACI,eAAD,CAAT,CAA2BiB,OAA3B;AAHJ;AAAA;AAAA;AAAA;AAAA,kBADF,eAKE,QAAC,OAAD;AACE,YAAA,KAAK,EAAEtB,KADT;AAEE,YAAA,QAAQ,EAAEC,SAAS,CAACI,eAAD,CAFrB;AAGE,YAAA,KAAK,EAAEH,KAHT;AAIE,YAAA,QAAQ,EAAEC,QAJZ;AAKE,YAAA,SAAS,EAAE,IALb;AAME,YAAA,eAAe,EAAEE;AANnB;AAAA;AAAA;AAAA;AAAA,kBALF,eAaE,QAAC,YAAD;AACA,YAAA,MAAM,EAAI,MAAMG,YAAY,EAD5B;AAEA,YAAA,MAAM,EAAI,MAAME,YAAY;AAF5B;AAAA;AAAA;AAAA;AAAA,kBAbF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF;;AAoBF,WAAK,WAAL;AACE,4BACE,QAAC,GAAD;AAAK,UAAA,EAAE,EAAC,YAAR;AAAqB,UAAA,IAAI,EAAE,UAA3B;AAAA,kCACE,QAAC,IAAD;AACE,YAAA,SAAS,EAAG,QADd;AAEE,YAAA,IAAI,EAAG,SAFT;AAAA,sBAGET,SAAS,CAACI,eAAD,CAAT,CAA2BiB,OAA3B;AAHF;AAAA;AAAA;AAAA;AAAA,kBADF,eAKE,QAAC,OAAD;AACE,YAAA,KAAK,EAAEtB,KADT;AAEE,YAAA,QAAQ,EAAEC,SAAS,CAACI,eAAD,CAFrB;AAGE,YAAA,KAAK,EAAEH,KAHT;AAIE,YAAA,QAAQ,EAAEC,QAJZ;AAKE,YAAA,SAAS,EAAE;AALb;AAAA;AAAA;AAAA;AAAA,kBALF,eAYE,QAAC,YAAD;AACA,YAAA,MAAM,EAAI,MAAMQ,mBAAmB,CAACH,YAAD,CADnC;AAEA,YAAA,MAAM,EAAI,MAAMG,mBAAmB,CAACD,YAAD;AAFnC;AAAA;AAAA;AAAA;AAAA,kBAZF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF;;AAmBA,WAAK,QAAL;AACE,4BACE,QAAC,GAAD;AAAK,UAAA,EAAE,EAAC,YAAR;AAAqB,UAAA,IAAI,EAAE,UAA3B;AAAA,kCACE,QAAC,IAAD;AACgC,YAAA,SAAS,EAAG,QAD5C;AAEgC,YAAA,IAAI,EAAG,SAFvC;AAAA,sBAGQT,SAAS,CAACI,eAAD,CAAT,CAA2BiB,OAA3B;AAHR;AAAA;AAAA;AAAA;AAAA,kBADF,eAKE,QAAC,MAAD;AACE,YAAA,KAAK,EAAEtB,KADT;AAEE,YAAA,QAAQ,EAAEC,SAAS,CAACI,eAAD,CAFrB;AAGE,YAAA,KAAK,EAAEH,KAHT;AAIE,YAAA,QAAQ,EAAEC,QAJZ;AAKE,YAAA,SAAS,EAAE;AALb;AAAA;AAAA;AAAA;AAAA,kBALF,eAYE,QAAC,YAAD;AACA,YAAA,MAAM,EAAI,MAAMoB,+BAA+B,EAD/C;AAEA,YAAA,MAAM,EAAI,MAAMC,+BAA+B;AAF/C;AAAA;AAAA;AAAA;AAAA,kBAZF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF;;AAmBF,WAAK,KAAL;AACE,4BACE,QAAC,GAAD;AAAK,UAAA,EAAE,EAAC,YAAR;AAAqB,UAAA,IAAI,EAAE,UAA3B;AAAA,kCACE,QAAC,IAAD;AACgB,YAAA,SAAS,EAAG,QAD5B;AAEgB,YAAA,IAAI,EAAG,SAFvB;AAAA,sBAGMvB,SAAS,CAACI,eAAD,CAAT,CAA2BiB,OAA3B;AAHN;AAAA;AAAA;AAAA;AAAA,kBADF,eAKE,QAAC,GAAD;AACE,YAAA,IAAI,EAAEtB,KAAK,CAAC,CAAD,CAAL,CAASiB,OAAT,EADR;AAEE,YAAA,QAAQ,EAAEhB,SAAS,CAACI,eAAD,CAFrB;AAGE,YAAA,KAAK,EAAEH,KAHT;AAIE,YAAA,QAAQ,EAAEC,QAJZ;AAKE,YAAA,SAAS,EAAE;AALb;AAAA;AAAA;AAAA;AAAA,kBALF,eAYE,QAAC,YAAD;AACA,YAAA,MAAM,EAAI,MAAMgB,aAAa,CAACX,YAAD,CAD7B;AAEA,YAAA,MAAM,EAAI,MAAMW,aAAa,CAACT,YAAD;AAF7B;AAAA;AAAA;AAAA;AAAA,kBAZF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF;;AAmBJ;AACGe,QAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ,EAAwCzB,SAAS,CAACI,eAAD,CAAjD,CAAD;AAnFN;AAqFH;;AACC,SAAOe,yBAAyB,EAAhC;AAEC;;GAzIqBrB,gB;;KAAAA,gB","sourcesContent":["/**\n * This components handles the top level state of the form that we will ultimately submit.\n * This component is basically the entry point of the GENSI application\n * Every \"page\" saves their state in this parent component.\n * This is a simple multi-page form architecture. \n */\nimport React, { Component } from 'react';\nimport ParagraphPage from './paragraphPage'\nimport NodeCreationFunction from './nodeCreationFunction'\n\nimport ButtonFooter from './buttonFooter'\nimport { Box } from 'grommet';\nimport { Node } from './models/node';\nimport { Table } from './models/table';  \nimport { Question } from './models/question';  \nimport { Text } from \"grommet\";\nimport NodeRow from './nodeRow';\nimport LineBox from './lineBox';\nimport Ladder from './ladder';\nimport MCQ from './mcq'\n\n\nexport default function QuestionStrategy({\n  nodes,\n  questions,\n  table,\n  setTable,\n  superNext,\n}){\n\n  const [currentQuestion, setCurrentQuestion] = React.useState(0)\n\n  function nextQuestion(){\n    if(currentQuestion < questions.length-1){\n      setCurrentQuestion(currentQuestion+1)\n    }\n    else{\n      superNext()\n    }\n  }\n\n  function prevQuestion(){\n    if(currentQuestion > 0){\n      setCurrentQuestion(currentQuestion-1)\n    }\n  }\n\n\n  function dragNDropValidation(buttonCallback){\n    let valid = true\n    let i = 0\n    while(valid && i < nodes.length){\n      //table.getRelation(question.id, x.id)\n      if(table.getRelation(questions[currentQuestion].getId(), nodes[i].getName())[0][2] === false){\n        valid = false\n      }\n      i++\n    }\n\n    valid? buttonCallback() : alert(\"Please put all the nodes in a box before changing page.\")\n  }\n\n  function mcqValidation(buttonCallback){\n    let valid = true;\n    if(table.getRelation(questions[currentQuestion].getId(), nodes[0].getName())[0][2] === false){\n        valid = false\n    }\n    (valid)? buttonCallback() : alert(\"please select an option before proceeding\")\n  }\n\n  function questionComponentSelector(){\n    switch (questions[currentQuestion].getType()) {\n        case \"select\":\n          return (\n            <Box id=\"case 3 box\" fill= \"vertical\">\n              <Text\n                              alignSelf = \"center\"\n                              size = \"xxlarge\"\n                >{questions[currentQuestion].getText()}</Text>\n              <NodeRow\n                nodes={nodes}\n                question={questions[currentQuestion]}\n                table={table}\n                setTable={setTable}\n                filterYou={true}\n                currentQuestion={currentQuestion}\n              />\n              <ButtonFooter\n              onNext = {() => nextQuestion()}\n              onPrev = {() => prevQuestion()}\n              /> \n            </Box>\n          );\n        case \"dragndrop\":\n          return (\n            <Box id=\"case 3 box\" fill= \"vertical\">\n              <Text \n                alignSelf = \"center\"\n                size = \"xxlarge\"\n              >{questions[currentQuestion].getText()}</Text>\n              <LineBox\n                nodes={nodes}\n                question={questions[currentQuestion]}\n                table={table}\n                setTable={setTable}\n                filterYou={false}\n              />\n              <ButtonFooter\n              onNext = {() => dragNDropValidation(nextQuestion)}\n              onPrev = {() => dragNDropValidation(prevQuestion)}\n              /> \n            </Box>\n          );\n          case \"ladder\":\n            return (\n              <Box id=\"case 3 box\" fill= \"vertical\">\n                <Text\n                                                alignSelf = \"center\"\n                                                size = \"xxlarge\"\n                      >{questions[currentQuestion].getText()}</Text>\n                <Ladder\n                  nodes={nodes}\n                  question={questions[currentQuestion]}\n                  table={table}\n                  setTable={setTable}\n                  filterYou={false}\n                />\n                <ButtonFooter\n                onNext = {() => nextQuestionValidationDragndrop()}\n                onPrev = {() => prevQuestionValidationDragndrop()}\n                /> \n              </Box>\n            );\n          case \"mcq\":\n            return (\n              <Box id=\"case 3 box\" fill= \"vertical\">\n                <Text\n                                alignSelf = \"center\"\n                                size = \"xxlarge\"\n                    >{questions[currentQuestion].getText()}</Text>\n                <MCQ\n                  node={nodes[0].getName()}\n                  question={questions[currentQuestion]}\n                  table={table}\n                  setTable={setTable}\n                  filterYou={false}\n                />\n                <ButtonFooter\n                onNext = {() => mcqValidation(nextQuestion)}\n                onPrev = {() => mcqValidation(prevQuestion)}\n                /> \n              </Box>\n            );\n        default:\n          (console.log('Question type not valid.', questions[currentQuestion]))\n      }\n}\n  return questionComponentSelector()\n    \n  }"]},"metadata":{},"sourceType":"module"}