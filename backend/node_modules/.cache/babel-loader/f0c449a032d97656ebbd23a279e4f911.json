{"ast":null,"code":"var _jsxFileName = \"/Users/gg/dev/egoSurveyReact/egoSurveyReact/src/components/questionTypes/mcq.jsx\",\n    _s = $RefreshSig$();\n\n/**\n * component that handles a multiple choice question with an arbitrary number of choices. \n * Wraps around grommet RadioButtonGroup and provides yet another for the gensiForm\n */\nimport React, { useState, useEffect } from 'react';\nimport { Button, Text, Box, RadioButtonGroup } from \"grommet\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function MCQ({\n  node,\n  question,\n  table,\n  setTable,\n  filterYou //customValues, TODO implement cause right now we ust use the index \n\n}) {\n  _s();\n\n  const [value, setValue] = useState(false);\n  const boxes = question.getBoxes();\n  const options = boxes.map(box => box.id);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    id: \"mcq page\",\n    align: \"center\",\n    pad: \"large\",\n    justify: \"center\",\n    align: \"center\",\n    fill: \"vertical\",\n    children: /*#__PURE__*/_jsxDEV(RadioButtonGroup, {\n      align: \"center\",\n      justify: \"center\",\n      name: \"radio\",\n      options: options,\n      value: value,\n      onChange: event => {\n        setValue(event.target.value);\n        table.updateRelation(question.id, node, event.target.value);\n        console.log(table.getAll());\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 13\n  }, this);\n}\n\n_s(MCQ, \"HfkdrTZbv6ig6ZNY/1nxKCooDOU=\");\n\n_c = MCQ;\n\nvar _c;\n\n$RefreshReg$(_c, \"MCQ\");","map":{"version":3,"sources":["/Users/gg/dev/egoSurveyReact/egoSurveyReact/src/components/questionTypes/mcq.jsx"],"names":["React","useState","useEffect","Button","Text","Box","RadioButtonGroup","MCQ","node","question","table","setTable","filterYou","value","setValue","boxes","getBoxes","options","map","box","id","event","target","updateRelation","console","log","getAll"],"mappings":";;;AAAA;AACA;AACA;AACA;AAEC,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,GAAvB,EAA4BC,gBAA5B,QAAmD,SAAnD;;AAED,eAAe,SAASC,GAAT,CAAa;AACxBC,EAAAA,IADwB;AAExBC,EAAAA,QAFwB;AAGxBC,EAAAA,KAHwB;AAIxBC,EAAAA,QAJwB;AAKxBC,EAAAA,SALwB,CAKV;;AALU,CAAb,EAMb;AAAA;;AACE,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBb,QAAQ,CAAC,KAAD,CAAlC;AAGI,QAAMc,KAAK,GAAEN,QAAQ,CAACO,QAAT,EAAb;AACA,QAAMC,OAAO,GAAGF,KAAK,CAACG,GAAN,CAAUC,GAAG,IAAIA,GAAG,CAACC,EAArB,CAAhB;AACJ,sBAEQ,QAAC,GAAD;AAAK,IAAA,EAAE,EAAC,UAAR;AAAmB,IAAA,KAAK,EAAC,QAAzB;AAAkC,IAAA,GAAG,EAAC,OAAtC;AAA8C,IAAA,OAAO,EAAC,QAAtD;AAA+D,IAAA,KAAK,EAAC,QAArE;AAA8E,IAAA,IAAI,EAAC,UAAnF;AAAA,2BACI,QAAC,gBAAD;AAAmB,MAAA,KAAK,EAAC,QAAzB;AAAkC,MAAA,OAAO,EAAC,QAA1C;AACI,MAAA,IAAI,EAAC,OADT;AAEI,MAAA,OAAO,EAAEH,OAFb;AAGI,MAAA,KAAK,EAAEJ,KAHX;AAII,MAAA,QAAQ,EAAEQ,KAAK,IAAI;AAACP,QAAAA,QAAQ,CAACO,KAAK,CAACC,MAAN,CAAaT,KAAd,CAAR;AACCH,QAAAA,KAAK,CAACa,cAAN,CAAqBd,QAAQ,CAACW,EAA9B,EAAkCZ,IAAlC,EAAwCa,KAAK,CAACC,MAAN,CAAaT,KAArD;AACAW,QAAAA,OAAO,CAACC,GAAR,CAAYf,KAAK,CAACgB,MAAN,EAAZ;AACA;AAPzB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UAFR;AAcH;;GA1BuBnB,G;;KAAAA,G","sourcesContent":["/**\n * component that handles a multiple choice question with an arbitrary number of choices. \n * Wraps around grommet RadioButtonGroup and provides yet another for the gensiForm\n */\n\n import React, { useState, useEffect } from 'react';\n import { Button, Text, Box, RadioButtonGroup} from \"grommet\";\n\nexport default function MCQ({\n    node,\n    question,\n    table,\n    setTable,\n    filterYou,    //customValues, TODO implement cause right now we ust use the index \n}){\n    const [value, setValue] = useState(false);\n\n\n        const boxes =question.getBoxes()\n        const options = boxes.map(box => box.id);\n    return(\n\n            <Box id=\"mcq page\" align=\"center\" pad=\"large\" justify=\"center\" align=\"center\" fill=\"vertical\" >\n                <RadioButtonGroup  align=\"center\" justify=\"center\" \n                    name=\"radio\"\n                    options={options}\n                    value={value}\n                    onChange={event => {setValue(event.target.value)\n                                         table.updateRelation(question.id, node, event.target.value)\n                                         console.log(table.getAll())\n                                        }}\n                />\n            </Box>\n    )\n}"]},"metadata":{},"sourceType":"module"}