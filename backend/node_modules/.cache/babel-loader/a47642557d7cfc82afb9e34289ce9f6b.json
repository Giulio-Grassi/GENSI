{"ast":null,"code":"var _jsxFileName = \"/Users/gg/dev/egoSurveyReact/egoSurveyReact/src/components/gensiForm.jsx\",\n    _s = $RefreshSig$();\n\n/**\n * This components handles the top level state of the form that we will ultimately submit.\n * This component is basically the entry point of the GENSI application\n * Every \"page\" saves their state in this parent component.\n * This is a simple multi-page form architecture. \n */\nimport React, { Component } from 'react';\nimport ParagraphPage from './paragraphPage';\nimport NodeCreationFunction from './nodeCreationFunction';\nimport ButtonFooter from './buttonFooter';\nimport { Box } from 'grommet';\nimport { Node } from './models/node';\nimport { Table } from './models/table';\nimport { Question } from './models/question';\nimport { Text, Button } from \"grommet\";\nimport QuestionStrategy from './questionStrategy';\nimport myquestions from './questions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function GensiForm() {\n  _s();\n\n  const [step, setStep] = React.useState(1);\n  const question1 = {\n    id: 1,\n    text: \"Who do you like?\",\n    type: \"select\"\n  };\n  const question2 = {\n    id: 2,\n    text: \"WEALTH QUESTION\",\n    type: \"dragndrop\",\n    boxes: [{\n      id: \"More wealthy than me\",\n      colour: \"#AED6F1\"\n    }, {\n      id: \"Less wealthy than me\",\n      colour: \"#E74C3C\"\n    }]\n  }; //   const [nodes[], setNodes] = React.useState('');\n\n  const [nodes, setNodes] = React.useState([new Node(\"You\", 0, 0, true)]); //Array of nodes. 0 and 0 are attributes fx and fx that used by d3 to fix a node in positon\n  //   question initaliser from json\n\n  const myquestionsvar = myquestions();\n  const questionArray = myquestionsvar.map(q => new Question(q));\n  const [questions, setQuestion] = React.useState(questionArray); //React state containing the array of questions\n\n  const [table, setTable] = React.useState(new Table()); //State containing the MxN relationship table\n  // Proceed to next step\n\n  function nextStep() {\n    setStep(step + 1);\n  }\n\n  ; // Go back to prev step\n\n  function prevStep() {\n    setStep(step - 1);\n  }\n\n  ;\n\n  function createNode(nodeName) {\n    //IMPORTANT AS ALL THE USESTATES NEED TO BE INITIALISED \n    setNodes([...nodes, new Node(nodeName, 0, 0)]);\n  }\n\n  function populateTable() {\n    for (var i = 0; i < questions.length; i++) {\n      if (questions[i].getType() === 'mcq') {\n        table.insertRelation(questions[i].getId(), nodes[0].getName(), false);\n        continue;\n      }\n\n      for (var k = 0; k < nodes.length; k++) {\n        table.insertRelation(questions[i].getId(), nodes[k].getName(), false);\n      }\n    }\n\n    console.log(\"populateTable\", table.getAll());\n  }\n\n  function renderPageBaseOnStep() {\n    switch (step) {\n      case 1:\n        return /*#__PURE__*/_jsxDEV(Box, {\n          id: \"case 1 box\",\n          fill: \"vertical\",\n          children: [/*#__PURE__*/_jsxDEV(ParagraphPage, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(ButtonFooter, {\n            onNext: nextStep,\n            onPrev: prevStep\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 20\n        }, this);\n\n      case 2:\n        return /*#__PURE__*/_jsxDEV(Box, {\n          id: \"case 2 box\",\n          fill: \"vertical\",\n          children: [/*#__PURE__*/_jsxDEV(NodeCreationFunction, {\n            nodes: nodes,\n            onNodeCreation: createNode\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(ButtonFooter, {\n            onNext: () => {\n              populateTable();\n              nextStep();\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 13\n        }, this);\n\n      case 3:\n        /*return (\n          <Box id=\"case 3 box\" fill= \"vertical\">\n            <Text>Dioacnae</Text>\n          <NodeRow\n          nodes={nodes}\n          questions={questions}\n          table={table}\n          setTable={setTable}\n          filterYou={true}\n          />\n          <ButtonFooter\n          onNext = {nextStep()}\n          /> \n          </Box>\n         );*/\n        return /*#__PURE__*/_jsxDEV(QuestionStrategy, {\n          nodes: nodes,\n          questions: questions,\n          table: table,\n          setTable: setTable,\n          superNext: () => nextStep()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 15\n        }, this);\n\n      default:\n        console.log('This is a multi-step form built with React.');\n    }\n  }\n\n  return renderPageBaseOnStep();\n}\n\n_s(GensiForm, \"abXEmyktQtaSt1uPm+PVcGs0QXw=\");\n\n_c = GensiForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"GensiForm\");","map":{"version":3,"sources":["/Users/gg/dev/egoSurveyReact/egoSurveyReact/src/components/gensiForm.jsx"],"names":["React","Component","ParagraphPage","NodeCreationFunction","ButtonFooter","Box","Node","Table","Question","Text","Button","QuestionStrategy","myquestions","GensiForm","step","setStep","useState","question1","id","text","type","question2","boxes","colour","nodes","setNodes","myquestionsvar","questionArray","map","q","questions","setQuestion","table","setTable","nextStep","prevStep","createNode","nodeName","populateTable","i","length","getType","insertRelation","getId","getName","k","console","log","getAll","renderPageBaseOnStep"],"mappings":"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","sourcesContent":["/**\n * This components handles the top level state of the form that we will ultimately submit.\n * This component is basically the entry point of the GENSI application\n * Every \"page\" saves their state in this parent component.\n * This is a simple multi-page form architecture. \n */\nimport React, { Component } from 'react';\nimport ParagraphPage from './paragraphPage'\nimport NodeCreationFunction from './nodeCreationFunction'\nimport ButtonFooter from './buttonFooter'\nimport { Box } from 'grommet';\nimport { Node } from './models/node';\nimport { Table } from './models/table';  \nimport { Question } from './models/question';  \nimport { Text, Button } from \"grommet\";\nimport QuestionStrategy from './questionStrategy';\nimport myquestions from './questions'\n\nexport default function GensiForm() {\n  const [step, setStep] = React.useState(1)\n  const question1 = {\n    id: 1,\n    text: \"Who do you like?\",\n    type: \"select\"\n  }\n  const question2 = {\n    id: 2,\n    text: \"WEALTH QUESTION\",\n    type: \"dragndrop\",\n    boxes: [{id: \"More wealthy than me\", colour: \"#AED6F1\"},{id: \"Less wealthy than me\", colour: \"#E74C3C\"}]\n  }\n\n  //   const [nodes[], setNodes] = React.useState('');\n  const [nodes, setNodes] = React.useState([new Node(\"You\", 0, 0, true)]); //Array of nodes. 0 and 0 are attributes fx and fx that used by d3 to fix a node in positon\n  //   question initaliser from json\n  const myquestionsvar = myquestions()\n  const questionArray = myquestionsvar.map(q => new Question(q))\n  const [questions, setQuestion] = React.useState(questionArray); //React state containing the array of questions\n  const [table, setTable] = React.useState(new Table()); //State containing the MxN relationship table\n\n\n  // Proceed to next step\n  function nextStep(){\n    setStep(step + 1);\n  };\n\n  // Go back to prev step\n  function prevStep(){\n    setStep(step - 1);\n  };\n\n  function createNode(nodeName) { //IMPORTANT AS ALL THE USESTATES NEED TO BE INITIALISED \n     setNodes(\n        [...nodes,\n        new Node(nodeName, 0, 0)]\n        );\n  }\n\n  function populateTable(){\n    for(var i = 0; i < questions.length; i++){\n      if(questions[i].getType()==='mcq'){\n        table.insertRelation(questions[i].getId(), nodes[0].getName(), false)\n        continue\n      }\n      for(var k = 0; k < nodes.length; k++){\n        table.insertRelation(questions[i].getId(), nodes[k].getName(), false)\n      }\n    }\n    console.log(\"populateTable\", table.getAll())\n  }\n\n  function renderPageBaseOnStep(){\n    switch (step) {\n        case 1:\n          return ( <Box id=\"case 1 box\" fill= \"vertical\" >\n            <ParagraphPage\n            />\n            <ButtonFooter\n            onNext = {nextStep}\n            onPrev = {prevStep}\n            /> \n            </Box>\n          );\n        case 2:\n          return (\n            <Box  id=\"case 2 box\" fill= \"vertical\">\n            <NodeCreationFunction\n              nodes={nodes}\n              onNodeCreation={createNode}\n            />\n            <ButtonFooter\n            onNext = {() => {\n              populateTable();\n              nextStep();\n            }}\n            /> \n            </Box>\n            );\n        case 3:\n          /*return (\n            <Box id=\"case 3 box\" fill= \"vertical\">\n              <Text>Dioacnae</Text>\n            <NodeRow\n            nodes={nodes}\n            questions={questions}\n            table={table}\n            setTable={setTable}\n            filterYou={true}\n            />\n            <ButtonFooter\n            onNext = {nextStep()}\n            /> \n            </Box>\n\n          );*/\n          return (\n              <QuestionStrategy\n                nodes={nodes}\n                questions={questions}\n                table={table}\n                setTable={setTable}\n                superNext={() => nextStep()}\n              />\n          );\n        default:\n          (console.log('This is a multi-step form built with React.'))\n      }\n}\n  return renderPageBaseOnStep()\n    \n  }"]},"metadata":{},"sourceType":"module"}