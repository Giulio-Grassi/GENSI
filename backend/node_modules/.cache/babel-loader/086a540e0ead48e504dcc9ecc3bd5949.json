{"ast":null,"code":"//Table tuples are [questionId, nodeName, status]\nexport class Table {\n  constructor() {\n    this.insertRelation = (questionId, nodeName, status) => {\n      var exists = this.matrix.filter(x => {\n        if (x[0] === questionId && x[1] === nodeName) {\n          return true;\n        }\n\n        return false;\n      });\n\n      if (exists) {\n        return this.updateRelation(questionId, nodeName, status);\n      } else {\n        this.matrix.push([questionId, nodeName, status]);\n        return this;\n      }\n    };\n\n    this.updateRelation = (questionId, nodeName, status) => {\n      this.matrix.map(x => {\n        if (x[0] === questionId && x[1] === nodeName) {\n          return [questionId, nodeName, status];\n        } else {\n          return x;\n        }\n      });\n      return this;\n    };\n\n    this.toggleRelation = (questionId, nodeName) => {\n      this.matrix = this.matrix.map(x => {\n        if (x[0] === questionId && x[1] === nodeName) {\n          return [questionId, nodeName, !x[2]];\n        } else {\n          return x;\n        }\n      });\n      return this;\n    };\n\n    this.deleteRelation = (questionId, nodeName) => {\n      this.matrix = this.matrix.filter(x => x[0] !== questionId || x[1] !== nodeName);\n    };\n\n    this.getRelation = (questionId, nodeName) => {\n      return this.matrix.filter(x => x[0] === questionId && x[1] === nodeName);\n    };\n\n    this.getAnswers = questionId => {\n      return this.matrix.filter(x => x[0] === questionId);\n    };\n\n    this.getAll = () => {\n      return this.matrix;\n    };\n\n    this.matrix = [];\n  }\n\n}","map":{"version":3,"sources":["/Users/gg/dev/egoSurveyReact/egoSurveyReact/src/components/models/table.js"],"names":["Table","constructor","insertRelation","questionId","nodeName","status","exists","matrix","filter","x","updateRelation","push","map","toggleRelation","deleteRelation","getRelation","getAnswers","getAll"],"mappings":"AAAA;AACA,OAAO,MAAMA,KAAN,CAAY;AACjBC,EAAAA,WAAW,GAAG;AAAA,SAIdC,cAJc,GAIG,CAACC,UAAD,EAAaC,QAAb,EAAuBC,MAAvB,KAAkC;AACjD,UAAIC,MAAM,GAAG,KAAKC,MAAL,CAAYC,MAAZ,CAAmBC,CAAC,IAAI;AACnC,YAAGA,CAAC,CAAC,CAAD,CAAD,KAASN,UAAT,IAAuBM,CAAC,CAAC,CAAD,CAAD,KAASL,QAAnC,EAA4C;AAC1C,iBAAO,IAAP;AACD;;AACD,eAAO,KAAP;AACD,OALY,CAAb;;AAOA,UAAGE,MAAH,EAAU;AACR,eAAO,KAAKI,cAAL,CAAoBP,UAApB,EAAgCC,QAAhC,EAA0CC,MAA1C,CAAP;AACD,OAFD,MAGI;AACF,aAAKE,MAAL,CAAYI,IAAZ,CAAiB,CAACR,UAAD,EAAaC,QAAb,EAAuBC,MAAvB,CAAjB;AACA,eAAO,IAAP;AACD;AACF,KAnBa;;AAAA,SAqBdK,cArBc,GAqBG,CAACP,UAAD,EAAaC,QAAb,EAAuBC,MAAvB,KAAkC;AACjD,WAAKE,MAAL,CAAYK,GAAZ,CAAgBH,CAAC,IAAI;AACnB,YAAGA,CAAC,CAAC,CAAD,CAAD,KAASN,UAAT,IAAuBM,CAAC,CAAC,CAAD,CAAD,KAASL,QAAnC,EAA4C;AAC1C,iBAAO,CAACD,UAAD,EAAaC,QAAb,EAAuBC,MAAvB,CAAP;AACD,SAFD,MAGI;AACF,iBAAOI,CAAP;AACD;AACF,OAPD;AASA,aAAO,IAAP;AACD,KAhCa;;AAAA,SAkCdI,cAlCc,GAkCG,CAACV,UAAD,EAAaC,QAAb,KAA0B;AACzC,WAAKG,MAAL,GAAc,KAAKA,MAAL,CAAYK,GAAZ,CAAgBH,CAAC,IAAI;AACjC,YAAGA,CAAC,CAAC,CAAD,CAAD,KAASN,UAAT,IAAuBM,CAAC,CAAC,CAAD,CAAD,KAASL,QAAnC,EAA4C;AAC1C,iBAAO,CAACD,UAAD,EAAaC,QAAb,EAAuB,CAACK,CAAC,CAAC,CAAD,CAAzB,CAAP;AACD,SAFD,MAGI;AACF,iBAAOA,CAAP;AACD;AACF,OAPa,CAAd;AAQA,aAAO,IAAP;AACD,KA5Ca;;AAAA,SA8CdK,cA9Cc,GA8CG,CAACX,UAAD,EAAaC,QAAb,KAA0B;AACzC,WAAKG,MAAL,GAAc,KAAKA,MAAL,CAAYC,MAAZ,CAAmBC,CAAC,IAAIA,CAAC,CAAC,CAAD,CAAD,KAASN,UAAT,IAAuBM,CAAC,CAAC,CAAD,CAAD,KAASL,QAAxD,CAAd;AACD,KAhDa;;AAAA,SAkDdW,WAlDc,GAkDA,CAACZ,UAAD,EAAaC,QAAb,KAA0B;AACtC,aAAO,KAAKG,MAAL,CAAYC,MAAZ,CAAmBC,CAAC,IAAIA,CAAC,CAAC,CAAD,CAAD,KAASN,UAAT,IAAuBM,CAAC,CAAC,CAAD,CAAD,KAASL,QAAxD,CAAP;AACD,KApDa;;AAAA,SAsDdY,UAtDc,GAsDAb,UAAD,IAAgB;AAC3B,aAAO,KAAKI,MAAL,CAAYC,MAAZ,CAAmBC,CAAC,IAAIA,CAAC,CAAC,CAAD,CAAD,KAASN,UAAjC,CAAP;AACD,KAxDa;;AAAA,SA0Ddc,MA1Dc,GA0DL,MAAM;AACb,aAAO,KAAKV,MAAZ;AACD,KA5Da;;AACZ,SAAKA,MAAL,GAAc,EAAd;AACD;;AAHgB","sourcesContent":["//Table tuples are [questionId, nodeName, status]\nexport class Table {\n  constructor() {\n    this.matrix = [];\n  }\n\n  insertRelation = (questionId, nodeName, status) => {\n    var exists = this.matrix.filter(x => {\n      if(x[0] === questionId && x[1] === nodeName){\n        return true\n      }\n      return false\n    })\n\n    if(exists){\n      return this.updateRelation(questionId, nodeName, status)\n    }\n    else{\n      this.matrix.push([questionId, nodeName, status])\n      return this\n    }\n  }\n\n  updateRelation = (questionId, nodeName, status) => {\n    this.matrix.map(x => {\n      if(x[0] === questionId && x[1] === nodeName){\n        return [questionId, nodeName, status]\n      }\n      else{\n        return x\n      }\n    })\n\n    return this\n  }\n\n  toggleRelation = (questionId, nodeName) => {\n    this.matrix = this.matrix.map(x => {\n      if(x[0] === questionId && x[1] === nodeName){\n        return [questionId, nodeName, !x[2]]\n      }\n      else{\n        return x\n      }\n    })\n    return this\n  }\n  \n  deleteRelation = (questionId, nodeName) => {\n    this.matrix = this.matrix.filter(x => x[0] !== questionId || x[1] !== nodeName)\n  }\n\n  getRelation = (questionId, nodeName) => {\n    return this.matrix.filter(x => x[0] === questionId && x[1] === nodeName)\n  }\n\n  getAnswers = (questionId) => {\n    return this.matrix.filter(x => x[0] === questionId)\n  }\n\n  getAll = () => {\n    return this.matrix\n  }\n}"]},"metadata":{},"sourceType":"module"}