{"ast":null,"code":"var _jsxFileName = \"/Users/gg/dev/egoSurveyReact/egoSurveyReact/src/components/questionTypes/lineBox.jsx\",\n    _s = $RefreshSig$();\n\n/**\n * arranges the nodes in a row so it's possible to select them,\n * once a node is selected it bumps up and changes color\n */\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { Box, DataTable, Button, Text, Layer, Heading, TextInput } from \"grommet\";\nimport { select, drag, forceSimulation, forceManyBody, forceCollide, forceCenter, tickFormat, timeHour, timeout, selectAll } from 'd3';\nimport useResizeObserver from '../useResizeObserver';\nimport { forceLink } from 'd3-force';\nimport { colors } from 'grommet/themes/base';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function LineBox({\n  nodes,\n  question,\n  table,\n  setTable,\n  filterYou,\n  darkMode\n}) {\n  _s();\n\n  const CIRCLE_RADIUS = 30;\n  const svgRef = useRef(); //gets a ref for the svg in which d3 renders in \n\n  const wrapperRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef); //used to resize \n\n  const [nodesRepresentation, setNodesRepresentation] = React.useState(nodes.map(x => {\n    return {\n      id: x.getName(),\n      selected: false\n    };\n  })); //TODO NINAD, HERE THE BOXES ARE DECLERED, MAYBE MAKE A MODEL, IDK HOW U WANT TO MAKE  THE STATE OUT OF THESE.\n  //const boxes = [{id: \"1\", nodeColor: \"ffa500\"},{id: \"22\", nodeColor: \"ffa500\"},{id: \"333\", nodeColor: \"ffa500\"}, {id: \"4444444\", nodeColor: \"ffa500\"}]\n\n  const boxes = [];\n  question.getBoxes().forEach(x => {\n    boxes.push({\n      id: x.id,\n      nodeColor: x.colour\n    });\n  }); //keeps the state of which box is curently being hovered on\n\n  const [boxToDropIn, setBoxToDropIn] = React.useState(\"\");\n  const [draggingNode, setDraggingNode] = React.useState(\"\"); //Temporary solution. ADD PADDING BETWEEN BOXES OF MINIMUM SIZE OF NODE. AND ALSO REDUCE NODE SIZE.\n\n  useEffect(() => {\n    if (draggingNode !== \"\") {\n      setTable(table.updateRelation(question.id, draggingNode, boxToDropIn));\n      const myboxArr = boxes.filter(box => box.id === boxToDropIn);\n      var newColor = \"#ABEBC6\";\n\n      if (myboxArr.length > 0) {\n        newColor = myboxArr[0].nodeColor;\n      } else {\n        newColor = \"#ABEBC6\";\n      }\n\n      selectAll(\".node\").filter(function (d) {\n        return d.id === draggingNode;\n      }).selectChild().attr(\"style\", d => \"fill:\" + newColor);\n    }\n  }, [boxToDropIn]); // will be called initially and on every data change\n\n  useEffect(() => {\n    if (!dimensions) return; // console.log(\"width\", dimensions.width)\n\n    const svg = select(svgRef.current);\n    svg.selectAll(\"*\").remove(); //Clear canvas so no duplicates are trailed every refresh\n    // centering workaround\n\n    svg.attr(\"viewBox\", [-dimensions.width / 2, -dimensions.height / 2, dimensions.width, dimensions.height]);\n    /**\n     * Draws the nodes on screen, appends the callbacks.\n     */\n\n    const nodes = drawNodes(svg, nodesRepresentation, CIRCLE_RADIUS);\n    nodes.attr(\"transform\", (d, i) => `translate(${d.x = nodePositionFuncX(i, dimensions)}, ${d.y = nodePositionFuncY(i)})`).call(drag().on(\"start\", dragstarted).on(\"drag\", dragged).on(\"end\", dragended)); // .attr(\"transform\", (d,i) => `translate(${d.x = }, ${d.y = 0 })`)\n\n    function nodePositionFuncX(i, dimensions) {\n      const manualPadding = 100;\n      const nodeOffset = (dimensions.width - 2 * manualPadding) / nodesRepresentation.length;\n      const x = -dimensions.width / 2 + manualPadding + nodeOffset / 2 + i * nodeOffset;\n      return x;\n    }\n\n    function nodePositionFuncY(i, dimensions) {\n      return 0;\n    }\n\n    function dragstarted(event, d) {\n      setDraggingNode(d.id); //console.log(\"dragstarted\", boxToDropIn)\n\n      select(this).raise().attr(\"stroke\", \"black\").style(\"pointer-events\", \"none\"); //this is done so that the mouseover event on the box can be detected\n    }\n\n    function dragged(event, d) {\n      //console.log(\"dragged\", boxToDropIn)\n      select(this).attr(\"transform\", () => `translate(${d.x = event.x}, ${d.y = event.y})`);\n    }\n    /**\n     * TODO NINAD : insert here the logic to save the state of the node being in a box if \n     * if boxTodropIn is not empty. \n     * ISSUES: select with the box id doesn't seem to be working\n     * TODO: re insert the logic so that the node can be dragged again after it is dropped the first time \n     * @param {*} event \n     * @param {*} d \n     */\n\n\n    function dragended(event, d) {\n      setDraggingNode(\"\");\n      /*setTimeout(function() {\n        console.log(\"dragended\", boxToDropIn)\n        if(boxToDropIn !== \"\"){\n          console.log(\"inside if\")\n          setTable(table.insertRelation(question.id, d.id, boxToDropIn))\n        }\n        select(thisObject).attr(\"stroke\", null)\n        .style(\"pointer-events\", \"auto\")\n      }, 100);*/\n      //console.log(\"dragended\", boxToDropIn)\n\n      select(this).attr(\"stroke\", null).style(\"pointer-events\", \"auto\");\n    } // ------FUNCTIONS FOR BOXES POSITION  AND SIZE  \n\n\n    const extraOuterPadding = 40; //this is extra for outer pad. total outer pad is manual + inner\n\n    const boxPadding = 280 / boxes.length;\n\n    function boxPositionFuncX(dimensions, extraOuterPadding, i) {\n      const boxOffset = (dimensions.width - 2 * extraOuterPadding) / boxes.length;\n      const x = -boxWidth / 2 - dimensions.width / 2 + extraOuterPadding + boxOffset / 2 + i * boxOffset;\n      return x;\n    }\n\n    function boxWidthWithPadding(dimensions, extraOuterPadding, boxPadding) {\n      const boxWidth = (dimensions.width - 2 * extraOuterPadding - boxPadding * (boxes.length - 1)) / boxes.length;\n      return boxWidth;\n    }\n\n    const boxWidth = boxWidthWithPadding(dimensions, extraOuterPadding, boxPadding); // ------------------\n    //Draws the boxes, positions them and appends necessary callbacks \n\n    const dropBoxes = drawBoxes(svg, boxes, boxWidth);\n    dropBoxes.attr(\"transform\", (d, i) => `translate(${d.x = boxPositionFuncX(dimensions, extraOuterPadding, i)}, ${d.y = 100})`).on(\"mouseover\", boxMouseOver).on(\"mouseout\", boxMouseOut);\n\n    function boxMouseOver(event, d) {\n      select(this).selectChild().attr(\"style\", \"fill:#F7DC6F\");\n      setBoxToDropIn(d.id); //console.log(\"box over with d.id: \"+d.id, boxToDropIn)\n      //console.log(d.id)\n    }\n\n    function boxMouseOut(Event, d) {\n      select(this).selectChild().attr(\"style\", \"fill:#E59866\");\n      setBoxToDropIn(\"\");\n    }\n  }, [nodesRepresentation, dimensions]); //TODO check if this nodes param here is right and what it does...\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    fill: true,\n    ref: wrapperRef,\n    pad: \"small\",\n    height: \"xxlarge\",\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: svgRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 21\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 189,\n    columnNumber: 17\n  }, this);\n}\n\n_s(LineBox, \"basmziHKdnUajoW6VjJ8BbUoyg0=\", false, function () {\n  return [useResizeObserver];\n});\n\n_c = LineBox;\n\nfunction drawNodes(svg, data, CIRCLE_RADIUS) {\n  const node = svg.selectAll(\".node\").data(data).join(\"g\").attr('class', 'node'); // .attr(\"transform\", (d,i) => `translate(${d.x = xfunc(i)}, ${d.y = yfunc(i) })`)\n  // .call(drag()\n  //       .on(\"start\", dragstarted)\n  //       .on(\"drag\", dragged)\n  //       .on(\"end\", dragended));\n\n  node.append('circle') //.join(\"g\")\n  .attr(\"r\", CIRCLE_RADIUS).attr(\"fill\", function (d) {\n    return '#42c58a';\n  });\n  node.append(\"text\") //.join(\"g\")\n  .text(d => d.id).attr('text-anchor', 'middle').attr('alignment-baseline', 'middle').style('fill', '#000').style('font-size', '20px');\n  return node;\n}\n/**\n * Handles the boxes on a graphical side only. position and callbacks are handled on their own\n * TODO parameterised the drawing better, adding colors and how much to round the corners... add height aswell\n * TODO maybe come up with a ratio between height and width\n * TODO find a way to display the text on the box better\n * @param {the svg canvas in which to draw the boxes} svg \n * @param {the data of the boxes} data \n * @param {the width of each box} boxWidth \n * @returns d3 selection with all the boxes so that it is then possible to append callbacks...\n */\n\n\nfunction drawBoxes(svg, data, boxWidth) {\n  const dropBox = svg.selectAll(\".dropBox\").data(data, d => d.id).join(\"g\") //a che serve sto join?\n  .attr('class', 'dropBox'); // .attr(\"transform\", (d,i) => `translate(${d.x = (-boxWidth/2 -dimensions.width / 2  + manualPaddingBox + boxOffset/2 + i * boxOffset)}, ${d.y = 100 })`)\n  // .on(\"mouseover\", boxMouseOver)\n  // .on(\"mouseout\", boxMouseOut)\n\n  const boxRect = dropBox.append(\"rect\") // pre-defined shape\n  .attr(\"style\", d => \"fill:#E59866\") // fill color of shape\n  .attr(\"rx\", 25) // how much to round corners \n  .attr(\"ry\", 25) // how much to round corners\n  .attr(\"width\", boxWidth).attr(\"height\", 150);\n  dropBox.append(\"text\").join(\"g\").text(d => d.id).attr(\"x\", boxWidth / 2) //Used to center the text in the box  \n  .attr('text-anchor', 'middle').attr('alignment-baseline', 'ideographic').style('fill', '#000').style('font-size', '20px');\n  return dropBox;\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"LineBox\");","map":{"version":3,"sources":["/Users/gg/dev/egoSurveyReact/egoSurveyReact/src/components/questionTypes/lineBox.jsx"],"names":["React","useState","useEffect","useRef","useCallback","Box","DataTable","Button","Text","Layer","Heading","TextInput","select","drag","forceSimulation","forceManyBody","forceCollide","forceCenter","tickFormat","timeHour","timeout","selectAll","useResizeObserver","forceLink","colors","LineBox","nodes","question","table","setTable","filterYou","darkMode","CIRCLE_RADIUS","svgRef","wrapperRef","dimensions","nodesRepresentation","setNodesRepresentation","map","x","id","getName","selected","boxes","getBoxes","forEach","push","nodeColor","colour","boxToDropIn","setBoxToDropIn","draggingNode","setDraggingNode","updateRelation","myboxArr","filter","box","newColor","length","d","selectChild","attr","svg","current","remove","width","height","drawNodes","i","nodePositionFuncX","y","nodePositionFuncY","call","on","dragstarted","dragged","dragended","manualPadding","nodeOffset","event","raise","style","extraOuterPadding","boxPadding","boxPositionFuncX","boxOffset","boxWidth","boxWidthWithPadding","dropBoxes","drawBoxes","boxMouseOver","boxMouseOut","Event","data","node","join","append","text","dropBox","boxRect"],"mappings":"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","sourcesContent":["/**\n * arranges the nodes in a row so it's possible to select them,\n * once a node is selected it bumps up and changes color\n */\n\n import React, { useState, useEffect, useRef, useCallback} from 'react';\n import { Box, DataTable, Button, Text, Layer, Heading, TextInput } from \"grommet\";\nimport {select, drag, forceSimulation, forceManyBody, forceCollide, forceCenter, tickFormat, timeHour, timeout, selectAll,} from 'd3'\nimport useResizeObserver from '../useResizeObserver'\nimport { forceLink } from 'd3-force';\nimport { colors } from 'grommet/themes/base';\n\n\nexport default function LineBox({\n  nodes,\n  question,\n  table,\n  setTable, \n  filterYou,\n  darkMode\n    }) {\n    const CIRCLE_RADIUS = 30;\n    const svgRef = useRef(); //gets a ref for the svg in which d3 renders in \n    const wrapperRef = useRef();\n    const dimensions = useResizeObserver(wrapperRef); //used to resize \n    const [nodesRepresentation, setNodesRepresentation] = React.useState(nodes.map(x => {\n      return {\n        id: x.getName(),\n        selected: false\n      }\n    }))\n\n      //TODO NINAD, HERE THE BOXES ARE DECLERED, MAYBE MAKE A MODEL, IDK HOW U WANT TO MAKE  THE STATE OUT OF THESE.\n        //const boxes = [{id: \"1\", nodeColor: \"ffa500\"},{id: \"22\", nodeColor: \"ffa500\"},{id: \"333\", nodeColor: \"ffa500\"}, {id: \"4444444\", nodeColor: \"ffa500\"}]\n        const boxes = []\n        question.getBoxes().forEach(x => {\n          boxes.push({id: x.id, nodeColor: x.colour})\n        })\n\n\n    //keeps the state of which box is curently being hovered on\n    const [boxToDropIn, setBoxToDropIn] = React.useState(\"\")\n    const [draggingNode, setDraggingNode] = React.useState(\"\")\n\n    //Temporary solution. ADD PADDING BETWEEN BOXES OF MINIMUM SIZE OF NODE. AND ALSO REDUCE NODE SIZE.\n    useEffect(()=> {\n      if(draggingNode !== \"\"){\n        setTable(table.updateRelation(question.id, draggingNode, boxToDropIn))\n        const myboxArr = boxes.filter(box => box.id === boxToDropIn)\n        var newColor = \"#ABEBC6\"\n        if(myboxArr.length > 0){\n           newColor = myboxArr[0].nodeColor;\n        }\n        else{\n          newColor = \"#ABEBC6\"\n        }\n        selectAll(\".node\")\n        .filter(function(d) { return d.id === draggingNode })\n        .selectChild()\n        .attr(\"style\", d => \"fill:\"+newColor);  \n      }\n    },[boxToDropIn])\n\n      // will be called initially and on every data change\n    useEffect(() => {\n      if (!dimensions) return;\n\n        // console.log(\"width\", dimensions.width)\n        \n        const svg = select(svgRef.current);\n        svg.selectAll(\"*\").remove(); //Clear canvas so no duplicates are trailed every refresh\n            // centering workaround\n    svg.attr(\"viewBox\", [\n        -dimensions.width / 2,\n        -dimensions.height / 2,\n        dimensions.width,\n        dimensions.height\n      ]);\n\n      /**\n       * Draws the nodes on screen, appends the callbacks.\n       */\n  const nodes = drawNodes(svg, nodesRepresentation, CIRCLE_RADIUS)\n      nodes  \n      .attr(\"transform\", (d,i) => `translate(${d.x = nodePositionFuncX(i, dimensions)}, ${d.y = nodePositionFuncY(i) })`)\n      .call(drag()\n            .on(\"start\", dragstarted)\n            .on(\"drag\", dragged)\n            .on(\"end\", dragended));\n     // .attr(\"transform\", (d,i) => `translate(${d.x = }, ${d.y = 0 })`)\n\n\n \n\n      function nodePositionFuncX(i, dimensions){\n        const manualPadding = 100\n        const nodeOffset = (dimensions.width - 2* manualPadding)/ nodesRepresentation.length\n        const x = (-dimensions.width / 2  + manualPadding + nodeOffset/2 + i * nodeOffset)\n        return x\n      }\n      function nodePositionFuncY(i, dimensions){\n        return 0\n      }\n\n        function dragstarted(event, d) {\n          setDraggingNode(d.id)\n          //console.log(\"dragstarted\", boxToDropIn)\n          select(this).raise().attr(\"stroke\", \"black\")\n          .style(\"pointer-events\", \"none\"); //this is done so that the mouseover event on the box can be detected\n        }\n      \n        function dragged(event, d) {\n          //console.log(\"dragged\", boxToDropIn)\n          select(this)\n          .attr(\"transform\", () => `translate(${d.x = event.x}, ${d.y = event.y })`)\n        }\n      \n      \n\n        /**\n         * TODO NINAD : insert here the logic to save the state of the node being in a box if \n         * if boxTodropIn is not empty. \n         * ISSUES: select with the box id doesn't seem to be working\n         * TODO: re insert the logic so that the node can be dragged again after it is dropped the first time \n         * @param {*} event \n         * @param {*} d \n         */\n        function dragended(event, d) {\n          setDraggingNode(\"\")\n          /*setTimeout(function() {\n            console.log(\"dragended\", boxToDropIn)\n            if(boxToDropIn !== \"\"){\n              console.log(\"inside if\")\n              setTable(table.insertRelation(question.id, d.id, boxToDropIn))\n            }\n            select(thisObject).attr(\"stroke\", null)\n            .style(\"pointer-events\", \"auto\")\n          }, 100);*/\n          //console.log(\"dragended\", boxToDropIn)\n          select(this).attr(\"stroke\", null)\n          .style(\"pointer-events\", \"auto\")\n        }\n      \n\n  // ------FUNCTIONS FOR BOXES POSITION  AND SIZE  \n      const extraOuterPadding = 40 //this is extra for outer pad. total outer pad is manual + inner\n      const boxPadding = 280 / boxes.length \n      function boxPositionFuncX(dimensions, extraOuterPadding, i){\n        const boxOffset = (dimensions.width - 2* extraOuterPadding)/ boxes.length\n        const x = (-boxWidth/2 -dimensions.width / 2  + extraOuterPadding + boxOffset/2 + i * boxOffset)\n        return x\n      }\n\n      function boxWidthWithPadding(dimensions, extraOuterPadding, boxPadding ){\n        const boxWidth = (dimensions.width - 2*extraOuterPadding - boxPadding*(boxes.length-1))/ boxes.length\n        return boxWidth\n      }\n\n      const boxWidth = boxWidthWithPadding(dimensions, extraOuterPadding, boxPadding)\n  // ------------------\n\n      //Draws the boxes, positions them and appends necessary callbacks \n      const dropBoxes = drawBoxes(svg, boxes, boxWidth)\n      dropBoxes\n      .attr(\"transform\", (d,i) => `translate(${d.x = boxPositionFuncX(dimensions, extraOuterPadding, i ) }, ${d.y = 100 })`)\n      .on(\"mouseover\", boxMouseOver)\n      .on(\"mouseout\", boxMouseOut)\n      \n\n\n      function boxMouseOver(event, d){\n        select(this).selectChild()\n        .attr(\"style\", \"fill:#F7DC6F\");\n        setBoxToDropIn(d.id)\n        \n        //console.log(\"box over with d.id: \"+d.id, boxToDropIn)\n        //console.log(d.id)\n      }\n      function boxMouseOut(Event, d){\n        select(this).selectChild()\n        .attr(\"style\", \"fill:#E59866\");\n        setBoxToDropIn(\"\")\n      }\n\n\n      }, [nodesRepresentation, dimensions]); //TODO check if this nodes param here is right and what it does...\n\n        return(\n                <Box fill={true} ref={wrapperRef}  pad=\"small\" height=\"xxlarge\">\n                    <svg ref={svgRef}></svg>\n                </Box>\n        )\n}\n\nfunction drawNodes(svg, data, CIRCLE_RADIUS){\n  const node = svg\n  .selectAll(\".node\")\n  .data(data)\n  .join(\"g\")\n  .attr('class', 'node')\n  // .attr(\"transform\", (d,i) => `translate(${d.x = xfunc(i)}, ${d.y = yfunc(i) })`)\n  // .call(drag()\n  //       .on(\"start\", dragstarted)\n  //       .on(\"drag\", dragged)\n  //       .on(\"end\", dragended));\n\n\nnode.append('circle')\n  //.join(\"g\")\n  .attr(\"r\", CIRCLE_RADIUS)\n  .attr(\"fill\", function (d) { return '#42c58a'; });  \n\n\nnode.append(\"text\")\n  //.join(\"g\")\n  .text(d => d.id)\n  .attr('text-anchor', 'middle')\n  .attr('alignment-baseline', 'middle')\n  .style('fill', '#000')\n  .style('font-size', '20px');\n  return node \n}\n\n/**\n * Handles the boxes on a graphical side only. position and callbacks are handled on their own\n * TODO parameterised the drawing better, adding colors and how much to round the corners... add height aswell\n * TODO maybe come up with a ratio between height and width\n * TODO find a way to display the text on the box better\n * @param {the svg canvas in which to draw the boxes} svg \n * @param {the data of the boxes} data \n * @param {the width of each box} boxWidth \n * @returns d3 selection with all the boxes so that it is then possible to append callbacks...\n */\nfunction drawBoxes(svg, data, boxWidth){\n  const dropBox = svg\n  .selectAll(\".dropBox\")\n  .data(data, d => d.id)\n  .join(\"g\")  //a che serve sto join?\n  .attr('class', 'dropBox')\n  // .attr(\"transform\", (d,i) => `translate(${d.x = (-boxWidth/2 -dimensions.width / 2  + manualPaddingBox + boxOffset/2 + i * boxOffset)}, ${d.y = 100 })`)\n  // .on(\"mouseover\", boxMouseOver)\n  // .on(\"mouseout\", boxMouseOut)\n\n  const boxRect = dropBox.append(\"rect\")\t\t// pre-defined shape\n  .attr(\"style\", d => \"fill:#E59866\")\t// fill color of shape\n    .attr(\"rx\", 25)\t\t\t\t\t\t\t\t// how much to round corners \n    .attr(\"ry\", 25)\t\t\t\t\t\t\t\t// how much to round corners\n    .attr(\"width\", boxWidth)\t\t\t\t\t\n    .attr(\"height\", 150);\n    \n  dropBox.append(\"text\")\n    .join(\"g\")\n    .text(d => d.id)\n    .attr(\"x\", boxWidth/2)              //Used to center the text in the box  \n    .attr('text-anchor', 'middle')\n    .attr('alignment-baseline', 'ideographic')\n    .style('fill', '#000')\n    .style('font-size', '20px');\n    \n    return dropBox\n}"]},"metadata":{},"sourceType":"module"}