{"ast":null,"code":"var _jsxFileName = \"/Users/gg/dev/egoSurveyReact/egoSurveyReact/src/components/dragDrop/lineBox.jsx\",\n    _s = $RefreshSig$();\n\n/**\n * arranges the nodes in a row so it's possible to select them,\n * once a node is selected it bumps up and changes color\n */\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Box, DataTable, Button, Text, Layer, Heading, TextInput } from \"grommet\";\nimport { select, forceSimulation, forceManyBody, forceCollide, forceCenter, tickFormat } from 'd3';\nimport useResizeObserver from '../useResizeObserver';\nimport { forceLink } from 'd3-force';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function LineBox({\n  nodes\n}) {\n  _s();\n\n  const CIRCLE_RADIUS = 30;\n  const svgRef = useRef(); //gets a ref for the svg in which d3 renders in \n\n  const wrapperRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef); //used to resize \n\n  const [nodesRepresentation, setNodesRepresentation] = React.useState(nodes.map(x => {\n    return {\n      id: x.getName(),\n      selected: false\n    };\n  })); // will be called initially and on every data change\n\n  useEffect(() => {\n    if (!dimensions) return;\n    const manualPadding = 100;\n    const nodeOffset = (dimensions.width - 2 * manualPadding) / nodesRepresentation.length;\n    console.log(\"width\", dimensions.width);\n    const svg = select(svgRef.current); // svg.selectAll(\"*\").remove(); //Clear canvas so no duplicates are trailed every refresh\n    // centering workaround\n\n    svg.attr(\"viewBox\", [-dimensions.width / 2, -dimensions.height / 2, dimensions.width, dimensions.height]);\n    const node = svg.selectAll(\".node\").data(nodesRepresentation).join(\"g\").attr('class', 'node').on(\"mouseover\", handleMouseOver).on(\"mouseout\", handleMouseOut).on(\"click\", handleMouseClick);\n    node.append('circle') //.join(\"g\")\n    .attr(\"r\", CIRCLE_RADIUS).attr(\"fill\", function (d) {\n      return '#5b8075';\n    });\n    node.append(\"text\") //.join(\"g\")\n    .text(d => d.id).attr('text-anchor', 'middle').attr('alignment-baseline', 'middle').style('fill', '#000').style('font-size', '20px');\n\n    function handleMouseClick(d, i) {\n      console.log(\"clicked\"); // nodes[this.index].selected = true\n\n      var name = nodesRepresentation[i.index].id; //enforce node name uniqueness to make this bulletproof\n\n      setNodesRepresentation(nodesRepresentation.map(x => {\n        if (x.id === name) {\n          var y = x;\n          y.selected = !y.selected;\n          return y;\n        } else {\n          return x;\n        }\n      }));\n    }\n\n    const simulation = forceSimulation(nodesRepresentation);\n    simulation.on(\"tick\", () => {\n      node //  // .attr(\"x\", d => (d.index * nodeOffset) + manualPadding - ( -dimensions.width / 2))\n      //   //.attr(\"transform\", d => `translate(${ -((d.index * nodeOffset) + manualPadding - (dimensions.width / 2))}, ${d.selected ? d.y : 100 })`);\n      .attr(\"transform\", d => `translate(${d.x = -dimensions.width / 2 + manualPadding + nodeOffset / 2 + d.index * nodeOffset}, ${d.selected ? d.y = 0 : d.y = 100})`); //console.log(\"simulation nodes \", nodes)\n    });\n  }, [nodesRepresentation, dimensions]); //TODO check if this nodes param here is right and what it does...\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    fill: true,\n    ref: wrapperRef,\n    pad: \"small\",\n    height: \"xxlarge\",\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: svgRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 21\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 17\n  }, this);\n}\n\n_s(LineBox, \"A37/+amAD4FyFwe8htcKY1i7DLo=\", false, function () {\n  return [useResizeObserver];\n});\n\n_c = LineBox;\n\nvar _c;\n\n$RefreshReg$(_c, \"LineBox\");","map":{"version":3,"sources":["/Users/gg/dev/egoSurveyReact/egoSurveyReact/src/components/dragDrop/lineBox.jsx"],"names":["React","useState","useEffect","useRef","Box","DataTable","Button","Text","Layer","Heading","TextInput","select","forceSimulation","forceManyBody","forceCollide","forceCenter","tickFormat","useResizeObserver","forceLink","LineBox","nodes","CIRCLE_RADIUS","svgRef","wrapperRef","dimensions","nodesRepresentation","setNodesRepresentation","map","x","id","getName","selected","manualPadding","nodeOffset","width","length","console","log","svg","current","attr","height","node","selectAll","data","join","on","handleMouseOver","handleMouseOut","handleMouseClick","append","d","text","style","i","name","index","y","simulation"],"mappings":"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","sourcesContent":["/**\n * arranges the nodes in a row so it's possible to select them,\n * once a node is selected it bumps up and changes color\n */\n\n import React, { useState, useEffect, useRef} from 'react';\n import { Box, DataTable, Button, Text, Layer, Heading, TextInput } from \"grommet\";\nimport {select, forceSimulation, forceManyBody, forceCollide, forceCenter, tickFormat,} from 'd3'\nimport useResizeObserver from '../useResizeObserver'\nimport { forceLink } from 'd3-force';\n\n\nexport default function LineBox({\n     nodes,\n    }) {\n    const CIRCLE_RADIUS = 30;\n    const svgRef = useRef(); //gets a ref for the svg in which d3 renders in \n    const wrapperRef = useRef();\n    const dimensions = useResizeObserver(wrapperRef); //used to resize \n    const [nodesRepresentation, setNodesRepresentation] = React.useState(nodes.map(x => {\n      return {\n        id: x.getName(),\n        selected: false\n      }\n    }))\n\n\n      // will be called initially and on every data change\n    useEffect(() => {\n      if (!dimensions) return;\n\n        const manualPadding = 100\n        const nodeOffset = (dimensions.width - 2* manualPadding)/ nodesRepresentation.length\n        console.log(\"width\", dimensions.width)\n        \n        const svg = select(svgRef.current);\n        // svg.selectAll(\"*\").remove(); //Clear canvas so no duplicates are trailed every refresh\n            // centering workaround\n    svg.attr(\"viewBox\", [\n        -dimensions.width / 2,\n        -dimensions.height / 2,\n        dimensions.width,\n        dimensions.height\n      ]);\n\n  const node = svg\n      .selectAll(\".node\")\n      .data(nodesRepresentation)\n      .join(\"g\")\n      .attr('class', 'node')\n      .on(\"mouseover\", handleMouseOver)\n      .on(\"mouseout\", handleMouseOut)\n      .on(\"click\", handleMouseClick);\n\n\n  node.append('circle')\n      //.join(\"g\")\n      .attr(\"r\", CIRCLE_RADIUS)\n      .attr(\"fill\", function (d) { return '#5b8075'; });  \n\n\n  node.append(\"text\")\n      //.join(\"g\")\n      .text(d => d.id)\n      .attr('text-anchor', 'middle')\n      .attr('alignment-baseline', 'middle')\n      .style('fill', '#000')\n      .style('font-size', '20px');\n\n    \n      function handleMouseClick(d, i){\n\n        console.log(\"clicked\")\n        // nodes[this.index].selected = true\n        var name = nodesRepresentation[i.index].id //enforce node name uniqueness to make this bulletproof\n        setNodesRepresentation(\n          nodesRepresentation.map(x => {\n            if(x.id === name){\n              var y = x\n              y.selected = !y.selected\n              return y\n            }\n            else{\n              return x\n            }\n          })\n        )\n      }\n\n      \n      const simulation = forceSimulation(nodesRepresentation)\n\n      simulation.on(\"tick\", () => {\n         node\n      //  // .attr(\"x\", d => (d.index * nodeOffset) + manualPadding - ( -dimensions.width / 2))\n      //   //.attr(\"transform\", d => `translate(${ -((d.index * nodeOffset) + manualPadding - (dimensions.width / 2))}, ${d.selected ? d.y : 100 })`);\n         .attr(\"transform\", d => `translate(${d.x = (-dimensions.width / 2  + manualPadding + nodeOffset/2 + d.index * nodeOffset)}, ${d.selected ? d.y = 0 : d.y = 100 })`);\n\n        //console.log(\"simulation nodes \", nodes)\n      });\n      }, [nodesRepresentation, dimensions]); //TODO check if this nodes param here is right and what it does...\n\n        return(\n                <Box fill={true} ref={wrapperRef}  pad=\"small\" height=\"xxlarge\">\n                    <svg ref={svgRef}></svg>\n                </Box>\n        )\n}"]},"metadata":{},"sourceType":"module"}