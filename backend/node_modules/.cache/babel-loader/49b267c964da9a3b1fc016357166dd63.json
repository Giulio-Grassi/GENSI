{"ast":null,"code":"//Table tuples are [questionId, nodeName, status]\nexport class Table {\n  constructor() {\n    this.insertRelation = (questionId, nodeName, status) => {\n      this.matrix.push([questionId, nodeName, status]);\n      return this;\n    };\n\n    this.updateRelation = (questionId, nodeName, status) => {\n      this.matrix.map(x => {\n        if (x[0] === questionId && x[1] === nodeName) {\n          return [questionId, nodeName, status];\n        } else {\n          return x;\n        }\n      });\n      return this;\n    };\n\n    this.insertOrUpdateRelation = (questionId, nodeName, status) => {\n      const existence = this.matrix.filter(x => {\n        if (x[0] === questionId && x[1] === nodeName) {\n          return true;\n        } else {\n          return false;\n        }\n      });\n\n      if (existence) {\n        if (!existence[0][2] === status) {\n          const resultOfUpdate = this.matrix.map(x => {\n            if (x[0] === questionId && x[1] === nodeName) {\n              x.status = status;\n              return x;\n            } else {\n              return x;\n            }\n          });\n          this.matrix = resultOfUpdate;\n        }\n      } else {\n        this.matrix.push([questionId, nodeName, status]);\n      }\n\n      return this;\n    };\n\n    this.toggleRelation = (questionId, nodeName) => {\n      this.matrix = this.matrix.map(x => {\n        if (x[0] === questionId && x[1] === nodeName) {\n          return [questionId, nodeName, !x[2]];\n        } else {\n          return x;\n        }\n      });\n      return this;\n    };\n\n    this.deleteRelation = (questionId, nodeName) => {\n      this.matrix = this.matrix.filter(x => x[0] !== questionId || x[1] !== nodeName);\n    };\n\n    this.getRelation = (questionId, nodeName) => {\n      return this.matrix.filter(x => x[0] === questionId && x[1] === nodeName);\n    };\n\n    this.getAnswers = questionId => {\n      return this.matrix.filter(x => x[0] === questionId);\n    };\n\n    this.matrix = [];\n  }\n\n  getAll() {\n    return this.matrix;\n  }\n\n}","map":{"version":3,"sources":["/Users/gg/dev/egoSurveyReact/egoSurveyReact/src/components/models/table.js"],"names":["Table","constructor","insertRelation","questionId","nodeName","status","matrix","push","updateRelation","map","x","insertOrUpdateRelation","existence","filter","resultOfUpdate","toggleRelation","deleteRelation","getRelation","getAnswers","getAll"],"mappings":"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","sourcesContent":["//Table tuples are [questionId, nodeName, status]\nexport class Table {\n  constructor() {\n    this.matrix = [];\n  }\n\n  insertRelation = (questionId, nodeName, status) => {\n    this.matrix.push([questionId, nodeName, status])\n    return this\n  }\n\n  updateRelation = (questionId, nodeName, status) => {\n    this.matrix.map(x => {\n      if(x[0] === questionId && x[1] === nodeName){\n        return [questionId, nodeName, status]\n      }\n      else{\n        return x\n      }\n    })\n\n    return this\n  }\n\n  insertOrUpdateRelation = (questionId, nodeName, status) => {\n    const existence = this.matrix.filter(x => {\n      if(x[0] === questionId && x[1] === nodeName){\n        return true\n      }\n      else{\n        return false\n      }\n    })\n\n    if(existence){\n      if(!existence[0][2] === status){\n        const resultOfUpdate = this.matrix.map(x => {\n          if(x[0] === questionId && x[1] === nodeName){\n            x.status = status\n            return x\n          }\n          else{\n            return x\n          }\n        })\n        this.matrix = resultOfUpdate\n      }\n    }\n    else{\n      this.matrix.push([questionId, nodeName, status])\n    }\n\n    return this\n  }\n\n  toggleRelation = (questionId, nodeName) => {\n    this.matrix = this.matrix.map(x => {\n      if(x[0] === questionId && x[1] === nodeName){\n        return [questionId, nodeName, !x[2]]\n      }\n      else{\n        return x\n      }\n    })\n    return this\n  }\n  \n  deleteRelation = (questionId, nodeName) => {\n    this.matrix = this.matrix.filter(x => x[0] !== questionId || x[1] !== nodeName)\n  }\n\n  getRelation = (questionId, nodeName) => {\n    return this.matrix.filter(x => x[0] === questionId && x[1] === nodeName)\n  }\n\n  getAnswers = (questionId) => {\n    return this.matrix.filter(x => x[0] === questionId)\n  }\n\n  getAll(){\n    return this.matrix\n  }\n}"]},"metadata":{},"sourceType":"module"}