{"ast":null,"code":"var _jsxFileName = \"/Users/gg/dev/egoSurveyReact/egoSurveyReact/src/components/dragDrop/lineBox.jsx\",\n    _s = $RefreshSig$();\n\n/**\n * arranges the nodes in a row so it's possible to select them,\n * once a node is selected it bumps up and changes color\n */\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Box, DataTable, Button, Text, Layer, Heading, TextInput } from \"grommet\";\nimport { select, drag, forceSimulation, forceManyBody, forceCollide, forceCenter, tickFormat } from 'd3';\nimport useResizeObserver from '../useResizeObserver';\nimport { forceLink } from 'd3-force';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function LineBox({\n  nodes\n}) {\n  _s();\n\n  const CIRCLE_RADIUS = 30;\n  const svgRef = useRef(); //gets a ref for the svg in which d3 renders in \n\n  const wrapperRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef); //used to resize \n\n  const [nodesRepresentation, setNodesRepresentation] = React.useState(nodes.map(x => {\n    return {\n      id: x.getName(),\n      selected: false\n    };\n  }));\n  const [boxToDropIn, setBoxToDropIn] = React.useState(); // will be called initially and on every data change\n\n  useEffect(() => {\n    if (!dimensions) return;\n    const manualPadding = 100;\n    const nodeOffset = (dimensions.width - 2 * manualPadding) / nodesRepresentation.length;\n    console.log(\"width\", dimensions.width);\n    const svg = select(svgRef.current); // svg.selectAll(\"*\").remove(); //Clear canvas so no duplicates are trailed every refresh\n    // centering workaround\n\n    svg.attr(\"viewBox\", [-dimensions.width / 2, -dimensions.height / 2, dimensions.width, dimensions.height]);\n    const node = svg.selectAll(\".node\").data(nodesRepresentation).join(\"g\").attr('class', 'node').attr(\"transform\", (d, i) => `translate(${d.x = -dimensions.width / 2 + manualPadding + nodeOffset / 2 + i * nodeOffset}, ${d.y = 0})`) //  .on(\"mouseover\", handleMouseOver)\n    //.on(\"mouseout\", handleMouseOut)\n    // .on(\"click\", handleMouseClick);\n    .call(drag().on(\"start\", dragstarted).on(\"drag\", dragged).on(\"end\", dragended));\n    node.append('circle') //.join(\"g\")\n    .attr(\"r\", CIRCLE_RADIUS).attr(\"fill\", function (d) {\n      return '#5b8075';\n    });\n    node.append(\"text\") //.join(\"g\")\n    .text(d => d.id).attr('text-anchor', 'middle').attr('alignment-baseline', 'middle').style('fill', '#000').style('font-size', '20px');\n\n    function boxMouseOver(event, d) {\n      select(this).selectChild().attr(\"style\", \"fill:blue\");\n      setBoxToDropIn(select(this).selectChild());\n      console.log(\"box over\");\n      console.log(boxToDropIn);\n    }\n\n    function boxMouseOut(Event, d) {\n      select(this).selectChild().attr(\"style\", \"fill:lightgrey\");\n      setBoxToDropIn(null);\n      console.log(\"box out\");\n      console.log(boxToDropIn);\n    }\n\n    function dragstarted(event, d) {\n      select(this).raise().attr(\"stroke\", \"black\").style(\"pointer-events\", \"none\");\n    }\n\n    function dragged(event, d) {\n      select(this).attr(\"transform\", () => `translate(${d.x = event.x}, ${d.y = event.y})`);\n    }\n\n    function dragended(event, d) {\n      select(this).attr(\"stroke\", null).style(\"pointer-events\", \"auto\");\n\n      if (boxToDropIn != null) {\n        select(boxToDropIn).attr(\"style\", \"fill:red\");\n      }\n    }\n\n    const boxes = [{\n      id: \"1\"\n    }, {\n      id: \"22\"\n    }, {\n      id: \"333\"\n    }, {\n      id: \"4444444\"\n    }];\n    const manualPaddingBox = 50; //this is extra for outer pad. total outer pad is manual + inner\n\n    const maybeInnerPad = 50;\n    const boxOffset = (dimensions.width - 2 * manualPaddingBox) / boxes.length;\n    const boxWidth = (dimensions.width - 2 * manualPaddingBox - maybeInnerPad * (boxes.length - 1)) / boxes.length;\n    const dropBox = svg.selectAll(\".dropBox\").data(boxes).join(\"g\") //a che serve sto join\n    .attr('class', 'dropBox').attr(\"transform\", (d, i) => `translate(${d.x = -boxWidth / 2 - dimensions.width / 2 + manualPaddingBox + boxOffset / 2 + i * boxOffset}, ${d.y = 100})`).on(\"mouseover\", boxMouseOver).on(\"mouseout\", boxMouseOut);\n    const boxRect = dropBox.append(\"rect\") // pre-defined shape\n    .attr(\"style\", \"fill:lightgrey\") // fill color of shape\n    //.attr(\"x\", x)\t\t\t\t\t\t\t\t// displacement from origin\n    //.attr(\"y\", y)\t\t\t\t\t\t\t\t// displacement from origin\n    .attr(\"rx\", 25) // how much to round corners - to be transitioned below\n    .attr(\"ry\", 25) // how much to round corners - to be transitioned below\n    .attr(\"width\", boxWidth) // size of shape\n    .attr(\"height\", 150);\n    dropBox.append(\"text\").join(\"g\").text(d => d.id).attr(\"x\", boxWidth / 2).attr('text-anchor', 'middle').attr('alignment-baseline', 'middle').style('fill', '#000').style('font-size', '20px');\n    const simulation = forceSimulation(nodesRepresentation);\n    simulation.on(\"tick\", () => {//  // .attr(\"x\", d => (d.index * nodeOffset) + manualPadding - ( -dimensions.width / 2))\n      //   //.attr(\"transform\", d => `translate(${ -((d.index * nodeOffset) + manualPadding - (dimensions.width / 2))}, ${d.selected ? d.y : 100 })`);\n      //console.log(\"simulation nodes \", nodes)\n    });\n  }, [nodesRepresentation, dimensions]); //TODO check if this nodes param here is right and what it does...\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    fill: true,\n    ref: wrapperRef,\n    pad: \"small\",\n    height: \"xxlarge\",\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: svgRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 21\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 162,\n    columnNumber: 17\n  }, this);\n}\n\n_s(LineBox, \"W3HWEjuHG43BagUQCqpYu8BX/qs=\", false, function () {\n  return [useResizeObserver];\n});\n\n_c = LineBox;\n\nvar _c;\n\n$RefreshReg$(_c, \"LineBox\");","map":{"version":3,"sources":["/Users/gg/dev/egoSurveyReact/egoSurveyReact/src/components/dragDrop/lineBox.jsx"],"names":["React","useState","useEffect","useRef","Box","DataTable","Button","Text","Layer","Heading","TextInput","select","drag","forceSimulation","forceManyBody","forceCollide","forceCenter","tickFormat","useResizeObserver","forceLink","LineBox","nodes","CIRCLE_RADIUS","svgRef","wrapperRef","dimensions","nodesRepresentation","setNodesRepresentation","map","x","id","getName","selected","boxToDropIn","setBoxToDropIn","manualPadding","nodeOffset","width","length","console","log","svg","current","attr","height","node","selectAll","data","join","d","i","y","call","on","dragstarted","dragged","dragended","append","text","style","boxMouseOver","event","selectChild","boxMouseOut","Event","raise","boxes","manualPaddingBox","maybeInnerPad","boxOffset","boxWidth","dropBox","boxRect","simulation"],"mappings":"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","sourcesContent":["/**\n * arranges the nodes in a row so it's possible to select them,\n * once a node is selected it bumps up and changes color\n */\n\n import React, { useState, useEffect, useRef} from 'react';\n import { Box, DataTable, Button, Text, Layer, Heading, TextInput } from \"grommet\";\nimport {select, drag, forceSimulation, forceManyBody, forceCollide, forceCenter, tickFormat,} from 'd3'\nimport useResizeObserver from '../useResizeObserver'\nimport { forceLink } from 'd3-force';\n\n\nexport default function LineBox({\n     nodes,\n    }) {\n    const CIRCLE_RADIUS = 30;\n    const svgRef = useRef(); //gets a ref for the svg in which d3 renders in \n    const wrapperRef = useRef();\n    const dimensions = useResizeObserver(wrapperRef); //used to resize \n    const [nodesRepresentation, setNodesRepresentation] = React.useState(nodes.map(x => {\n      return {\n        id: x.getName(),\n        selected: false\n      }\n    }))\n    const [boxToDropIn, setBoxToDropIn] = React.useState()\n\n\n      // will be called initially and on every data change\n    useEffect(() => {\n      if (!dimensions) return;\n\n        const manualPadding = 100\n        const nodeOffset = (dimensions.width - 2* manualPadding)/ nodesRepresentation.length\n        console.log(\"width\", dimensions.width)\n        \n        const svg = select(svgRef.current);\n        // svg.selectAll(\"*\").remove(); //Clear canvas so no duplicates are trailed every refresh\n            // centering workaround\n    svg.attr(\"viewBox\", [\n        -dimensions.width / 2,\n        -dimensions.height / 2,\n        dimensions.width,\n        dimensions.height\n      ]);\n\n  const node = svg\n      .selectAll(\".node\")\n      .data(nodesRepresentation)\n      .join(\"g\")\n      .attr('class', 'node')\n      .attr(\"transform\", (d,i) => `translate(${d.x = (-dimensions.width / 2  + manualPadding + nodeOffset/2 + i * nodeOffset)}, ${d.y = 0 })`)\n    //  .on(\"mouseover\", handleMouseOver)\n      //.on(\"mouseout\", handleMouseOut)\n     // .on(\"click\", handleMouseClick);\n      .call(drag()\n            .on(\"start\", dragstarted)\n            .on(\"drag\", dragged)\n            .on(\"end\", dragended));\n\n\n  node.append('circle')\n      //.join(\"g\")\n      .attr(\"r\", CIRCLE_RADIUS)\n      .attr(\"fill\", function (d) { return '#5b8075'; });  \n\n\n  node.append(\"text\")\n      //.join(\"g\")\n      .text(d => d.id)\n      .attr('text-anchor', 'middle')\n      .attr('alignment-baseline', 'middle')\n      .style('fill', '#000')\n      .style('font-size', '20px');\n\n\n      function boxMouseOver(event, d){\n        select(this).selectChild()\n        .attr(\"style\", \"fill:blue\");\n        setBoxToDropIn(select(this).selectChild())\n        console.log(\"box over\")\n        console.log(boxToDropIn)\n\n      }\n      function boxMouseOut(Event, d){\n        select(this).selectChild()\n        .attr(\"style\", \"fill:lightgrey\");\n        setBoxToDropIn(null)\n        console.log(\"box out\")\n        console.log(boxToDropIn)\n\n      }\n        function dragstarted(event, d) {\n          select(this).raise().attr(\"stroke\", \"black\")\n          .style(\"pointer-events\", \"none\");\n        }\n      \n        function dragged(event, d) {\n          select(this)\n          .attr(\"transform\", () => `translate(${d.x = event.x}, ${d.y = event.y })`)\n\n        }\n      \n        function dragended(event, d) {\n          select(this).attr(\"stroke\", null)\n          .style(\"pointer-events\", \"auto\");\n\n          if(boxToDropIn != null){\n            select(boxToDropIn)\n            .attr(\"style\", \"fill:red\")\n          }\n\n        }\n      \n\n      \n      const boxes = [{id: \"1\"},{id: \"22\"},{id: \"333\"}, {id: \"4444444\"}]\n      const manualPaddingBox = 50 //this is extra for outer pad. total outer pad is manual + inner\n      const maybeInnerPad = 50\n      const boxOffset = (dimensions.width - 2* manualPaddingBox)/ boxes.length\n      const boxWidth = (dimensions.width - 2*manualPaddingBox - maybeInnerPad*(boxes.length-1))/ boxes.length\n      const dropBox = svg\n      .selectAll(\".dropBox\")\n      .data(boxes)\n      .join(\"g\")  //a che serve sto join\n      .attr('class', 'dropBox')\n      .attr(\"transform\", (d,i) => `translate(${d.x = (-boxWidth/2 -dimensions.width / 2  + manualPaddingBox + boxOffset/2 + i * boxOffset)}, ${d.y = 100 })`)\n      .on(\"mouseover\", boxMouseOver)\n      .on(\"mouseout\", boxMouseOut)\n\n      const boxRect = dropBox.append(\"rect\")\t\t// pre-defined shape\n      .attr(\"style\", \"fill:lightgrey\")\t// fill color of shape\n        //.attr(\"x\", x)\t\t\t\t\t\t\t\t// displacement from origin\n        //.attr(\"y\", y)\t\t\t\t\t\t\t\t// displacement from origin\n        .attr(\"rx\", 25)\t\t\t\t\t\t\t\t// how much to round corners - to be transitioned below\n        .attr(\"ry\", 25)\t\t\t\t\t\t\t\t// how much to round corners - to be transitioned below\n        .attr(\"width\", boxWidth)\t\t\t\t\t\t// size of shape\n        .attr(\"height\", 150);\n        \n      dropBox.append(\"text\")\n        .join(\"g\")\n        .text(d => d.id)\n        .attr(\"x\", boxWidth/2)\n        .attr('text-anchor', 'middle')\n        .attr('alignment-baseline', 'middle')\n        .style('fill', '#000')\n        .style('font-size', '20px');\n      \n      const simulation = forceSimulation(nodesRepresentation)\n\n      simulation.on(\"tick\", () => {\n         \n      //  // .attr(\"x\", d => (d.index * nodeOffset) + manualPadding - ( -dimensions.width / 2))\n      //   //.attr(\"transform\", d => `translate(${ -((d.index * nodeOffset) + manualPadding - (dimensions.width / 2))}, ${d.selected ? d.y : 100 })`);\n         \n\n        //console.log(\"simulation nodes \", nodes)\n      });\n      }, [nodesRepresentation, dimensions]); //TODO check if this nodes param here is right and what it does...\n\n        return(\n                <Box fill={true} ref={wrapperRef}  pad=\"small\" height=\"xxlarge\">\n                    <svg ref={svgRef}></svg>\n                </Box>\n        )\n}"]},"metadata":{},"sourceType":"module"}