{"ast":null,"code":"var _jsxFileName = \"/Users/gg/dev/egoSurveyReact/egoSurveyReact/src/components/questionStrategy.jsx\",\n    _s = $RefreshSig$();\n\n/**\n * This components handles the top level state of the form that we will ultimately submit.\n * This component is basically the entry point of the GENSI application\n * Every \"page\" saves their state in this parent component.\n * This is a simple multi-page form architecture. \n */\nimport React, { Component } from 'react';\nimport ParagraphPage from './paragraphPage';\nimport NodeCreationFunction from './nodeCreationFunction';\nimport NodeRow from './nodeRow';\nimport MCQ from './mcq';\nimport ButtonFooter from './buttonFooter';\nimport { Box } from 'grommet';\nimport { Node } from './models/node';\nimport { Table } from './models/table';\nimport { Question } from './models/question';\nimport { Text } from \"grommet\";\nimport LineBox from './lineBox';\nimport Ladder from './lineBox';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function QuestionStrategy({\n  nodes,\n  questions,\n  table,\n  setTable,\n  superNext\n}) {\n  _s();\n\n  const [currentQuestion, setCurrentQuestion] = React.useState(0);\n\n  function nextQuestion() {\n    if (currentQuestion < questions.length - 1) {\n      setCurrentQuestion(currentQuestion + 1);\n    } else {\n      superNext();\n    }\n  }\n\n  function prevQuestion() {\n    if (currentQuestion > 0) {\n      setCurrentQuestion(currentQuestion - 1);\n    }\n  }\n\n  function nextQuestionValidationDragndrop() {\n    let valid = true;\n    let i = 0;\n\n    while (valid && i < nodes.length) {\n      //table.getRelation(question.id, x.id)\n      if (table.getRelation(questions[currentQuestion].getId(), nodes[i].getName())[0][2] === false) {\n        valid = false;\n      }\n\n      i++;\n    }\n\n    if (valid) {\n      nextQuestion();\n    } else {\n      alert(\"You need to put all the nodes in a box before the next step.\");\n    }\n  }\n\n  function prevQuestionValidationDragndrop() {\n    let valid = true;\n    let i = 0;\n\n    while (valid && i < nodes.length) {\n      //table.getRelation(question.id, x.id)\n      if (table.getRelation(questions[currentQuestion].getId(), nodes[i].getName())[0][2] === false) {\n        valid = false;\n      }\n\n      i++;\n    }\n\n    if (valid) {\n      prevQuestion();\n    } else {\n      alert(\"You need to put all the nodes in a box before going back.\");\n    }\n  }\n\n  function questionComponentSelector() {\n    switch (questions[currentQuestion].getType()) {\n      case \"select\":\n        return /*#__PURE__*/_jsxDEV(Box, {\n          id: \"case 3 box\",\n          fill: \"vertical\",\n          children: [/*#__PURE__*/_jsxDEV(Text, {\n            children: questions[currentQuestion].getText()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(NodeRow, {\n            nodes: nodes,\n            question: questions[currentQuestion],\n            table: table,\n            setTable: setTable,\n            filterYou: true,\n            currentQuestion: currentQuestion\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(ButtonFooter, {\n            onNext: () => nextQuestion(),\n            onPrev: () => prevQuestion()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 13\n        }, this);\n\n      case \"dragndrop\":\n        return /*#__PURE__*/_jsxDEV(Box, {\n          id: \"case 3 box\",\n          fill: \"vertical\",\n          children: [/*#__PURE__*/_jsxDEV(Text, {\n            children: questions[currentQuestion].getText()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(LineBox, {\n            nodes: nodes,\n            question: questions[currentQuestion],\n            table: table,\n            setTable: setTable,\n            filterYou: false\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(ButtonFooter, {\n            onNext: () => nextQuestionValidationDragndrop(),\n            onPrev: () => prevQuestionValidationDragndrop()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 15\n        }, this);\n\n      case \"ladder\":\n        return /*#__PURE__*/_jsxDEV(Box, {\n          id: \"case 3 box\",\n          fill: \"vertical\",\n          children: [/*#__PURE__*/_jsxDEV(Text, {\n            children: questions[currentQuestion].getText()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(LineBox, {\n            nodes: nodes,\n            question: questions[currentQuestion],\n            table: table,\n            setTable: setTable,\n            filterYou: false\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(ButtonFooter, {\n            onNext: () => nextQuestionValidationDragndrop(),\n            onPrev: () => prevQuestionValidationDragndrop()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 17\n        }, this);\n\n      default:\n        console.log('Question type not valid.', questions[currentQuestion]);\n    }\n  }\n\n  return questionComponentSelector();\n}\n\n_s(QuestionStrategy, \"9OM438k1WhEIHDwFF7YsuyU6VEk=\");\n\n_c = QuestionStrategy;\n\nvar _c;\n\n$RefreshReg$(_c, \"QuestionStrategy\");","map":{"version":3,"sources":["/Users/gg/dev/egoSurveyReact/egoSurveyReact/src/components/questionStrategy.jsx"],"names":["React","Component","ParagraphPage","NodeCreationFunction","NodeRow","MCQ","ButtonFooter","Box","Node","Table","Question","Text","LineBox","Ladder","QuestionStrategy","nodes","questions","table","setTable","superNext","currentQuestion","setCurrentQuestion","useState","nextQuestion","length","prevQuestion","nextQuestionValidationDragndrop","valid","i","getRelation","getId","getName","alert","prevQuestionValidationDragndrop","questionComponentSelector","getType","getText","console","log"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,oBAAP,MAAiC,wBAAjC;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,SAASC,GAAT,QAAoB,SAApB;AACA,SAASC,IAAT,QAAqB,eAArB;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,SAASC,QAAT,QAAyB,mBAAzB;AACA,SAASC,IAAT,QAAqB,SAArB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,MAAP,MAAmB,WAAnB;;AAGA,eAAe,SAASC,gBAAT,CAA0B;AACvCC,EAAAA,KADuC;AAEvCC,EAAAA,SAFuC;AAGvCC,EAAAA,KAHuC;AAIvCC,EAAAA,QAJuC;AAKvCC,EAAAA;AALuC,CAA1B,EAMb;AAAA;;AAEA,QAAM,CAACC,eAAD,EAAkBC,kBAAlB,IAAwCrB,KAAK,CAACsB,QAAN,CAAe,CAAf,CAA9C;;AAEA,WAASC,YAAT,GAAuB;AACrB,QAAGH,eAAe,GAAGJ,SAAS,CAACQ,MAAV,GAAiB,CAAtC,EAAwC;AACtCH,MAAAA,kBAAkB,CAACD,eAAe,GAAC,CAAjB,CAAlB;AACD,KAFD,MAGI;AACFD,MAAAA,SAAS;AACV;AACF;;AAED,WAASM,YAAT,GAAuB;AACrB,QAAGL,eAAe,GAAG,CAArB,EAAuB;AACrBC,MAAAA,kBAAkB,CAACD,eAAe,GAAC,CAAjB,CAAlB;AACD;AACF;;AAED,WAASM,+BAAT,GAA0C;AACxC,QAAIC,KAAK,GAAG,IAAZ;AACA,QAAIC,CAAC,GAAG,CAAR;;AACA,WAAMD,KAAK,IAAIC,CAAC,GAAGb,KAAK,CAACS,MAAzB,EAAgC;AAC9B;AACA,UAAGP,KAAK,CAACY,WAAN,CAAkBb,SAAS,CAACI,eAAD,CAAT,CAA2BU,KAA3B,EAAlB,EAAsDf,KAAK,CAACa,CAAD,CAAL,CAASG,OAAT,EAAtD,EAA0E,CAA1E,EAA6E,CAA7E,MAAoF,KAAvF,EAA6F;AAC3FJ,QAAAA,KAAK,GAAG,KAAR;AACD;;AACDC,MAAAA,CAAC;AACF;;AAED,QAAGD,KAAH,EAAS;AACPJ,MAAAA,YAAY;AACb,KAFD,MAGI;AACFS,MAAAA,KAAK,CAAC,8DAAD,CAAL;AACD;AACF;;AAED,WAASC,+BAAT,GAA0C;AACxC,QAAIN,KAAK,GAAG,IAAZ;AACA,QAAIC,CAAC,GAAG,CAAR;;AACA,WAAMD,KAAK,IAAIC,CAAC,GAAGb,KAAK,CAACS,MAAzB,EAAgC;AAC9B;AACA,UAAGP,KAAK,CAACY,WAAN,CAAkBb,SAAS,CAACI,eAAD,CAAT,CAA2BU,KAA3B,EAAlB,EAAsDf,KAAK,CAACa,CAAD,CAAL,CAASG,OAAT,EAAtD,EAA0E,CAA1E,EAA6E,CAA7E,MAAoF,KAAvF,EAA6F;AAC3FJ,QAAAA,KAAK,GAAG,KAAR;AACD;;AACDC,MAAAA,CAAC;AACF;;AAED,QAAGD,KAAH,EAAS;AACPF,MAAAA,YAAY;AACb,KAFD,MAGI;AACFO,MAAAA,KAAK,CAAC,2DAAD,CAAL;AACD;AACF;;AAED,WAASE,yBAAT,GAAoC;AAClC,YAAQlB,SAAS,CAACI,eAAD,CAAT,CAA2Be,OAA3B,EAAR;AACI,WAAK,QAAL;AACE,4BACE,QAAC,GAAD;AAAK,UAAA,EAAE,EAAC,YAAR;AAAqB,UAAA,IAAI,EAAE,UAA3B;AAAA,kCACE,QAAC,IAAD;AAAA,sBAAOnB,SAAS,CAACI,eAAD,CAAT,CAA2BgB,OAA3B;AAAP;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE,QAAC,OAAD;AACE,YAAA,KAAK,EAAErB,KADT;AAEE,YAAA,QAAQ,EAAEC,SAAS,CAACI,eAAD,CAFrB;AAGE,YAAA,KAAK,EAAEH,KAHT;AAIE,YAAA,QAAQ,EAAEC,QAJZ;AAKE,YAAA,SAAS,EAAE,IALb;AAME,YAAA,eAAe,EAAEE;AANnB;AAAA;AAAA;AAAA;AAAA,kBAFF,eAUE,QAAC,YAAD;AACA,YAAA,MAAM,EAAI,MAAMG,YAAY,EAD5B;AAEA,YAAA,MAAM,EAAI,MAAME,YAAY;AAF5B;AAAA;AAAA;AAAA;AAAA,kBAVF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF;;AAiBA,WAAK,WAAL;AACE,4BACE,QAAC,GAAD;AAAK,UAAA,EAAE,EAAC,YAAR;AAAqB,UAAA,IAAI,EAAE,UAA3B;AAAA,kCACE,QAAC,IAAD;AAAA,sBAAOT,SAAS,CAACI,eAAD,CAAT,CAA2BgB,OAA3B;AAAP;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE,QAAC,OAAD;AACE,YAAA,KAAK,EAAErB,KADT;AAEE,YAAA,QAAQ,EAAEC,SAAS,CAACI,eAAD,CAFrB;AAGE,YAAA,KAAK,EAAEH,KAHT;AAIE,YAAA,QAAQ,EAAEC,QAJZ;AAKE,YAAA,SAAS,EAAE;AALb;AAAA;AAAA;AAAA;AAAA,kBAFF,eASE,QAAC,YAAD;AACA,YAAA,MAAM,EAAI,MAAMQ,+BAA+B,EAD/C;AAEA,YAAA,MAAM,EAAI,MAAMO,+BAA+B;AAF/C;AAAA;AAAA;AAAA;AAAA,kBATF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF;;AAgBA,WAAK,QAAL;AACE,4BACE,QAAC,GAAD;AAAK,UAAA,EAAE,EAAC,YAAR;AAAqB,UAAA,IAAI,EAAE,UAA3B;AAAA,kCACE,QAAC,IAAD;AAAA,sBAAOjB,SAAS,CAACI,eAAD,CAAT,CAA2BgB,OAA3B;AAAP;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE,QAAC,OAAD;AACE,YAAA,KAAK,EAAErB,KADT;AAEE,YAAA,QAAQ,EAAEC,SAAS,CAACI,eAAD,CAFrB;AAGE,YAAA,KAAK,EAAEH,KAHT;AAIE,YAAA,QAAQ,EAAEC,QAJZ;AAKE,YAAA,SAAS,EAAE;AALb;AAAA;AAAA;AAAA;AAAA,kBAFF,eASE,QAAC,YAAD;AACA,YAAA,MAAM,EAAI,MAAMQ,+BAA+B,EAD/C;AAEA,YAAA,MAAM,EAAI,MAAMO,+BAA+B;AAF/C;AAAA;AAAA;AAAA;AAAA,kBATF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF;;AAgBN;AACGI,QAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ,EAAwCtB,SAAS,CAACI,eAAD,CAAjD,CAAD;AAtDN;AAwDH;;AACC,SAAOc,yBAAyB,EAAhC;AAEC;;GA3HqBpB,gB;;KAAAA,gB","sourcesContent":["/**\n * This components handles the top level state of the form that we will ultimately submit.\n * This component is basically the entry point of the GENSI application\n * Every \"page\" saves their state in this parent component.\n * This is a simple multi-page form architecture. \n */\nimport React, { Component } from 'react';\nimport ParagraphPage from './paragraphPage'\nimport NodeCreationFunction from './nodeCreationFunction'\nimport NodeRow from './nodeRow';\nimport MCQ from './mcq'\nimport ButtonFooter from './buttonFooter'\nimport { Box } from 'grommet';\nimport { Node } from './models/node';\nimport { Table } from './models/table';  \nimport { Question } from './models/question';  \nimport { Text } from \"grommet\";\nimport LineBox from './lineBox';\nimport Ladder from './lineBox';\n\n\nexport default function QuestionStrategy({\n  nodes,\n  questions,\n  table,\n  setTable,\n  superNext,\n}){\n\n  const [currentQuestion, setCurrentQuestion] = React.useState(0)\n\n  function nextQuestion(){\n    if(currentQuestion < questions.length-1){\n      setCurrentQuestion(currentQuestion+1)\n    }\n    else{\n      superNext()\n    }\n  }\n\n  function prevQuestion(){\n    if(currentQuestion > 0){\n      setCurrentQuestion(currentQuestion-1)\n    }\n  }\n\n  function nextQuestionValidationDragndrop(){\n    let valid = true\n    let i = 0\n    while(valid && i < nodes.length){\n      //table.getRelation(question.id, x.id)\n      if(table.getRelation(questions[currentQuestion].getId(), nodes[i].getName())[0][2] === false){\n        valid = false\n      }\n      i++\n    }\n    \n    if(valid){\n      nextQuestion()\n    }\n    else{\n      alert(\"You need to put all the nodes in a box before the next step.\")\n    }\n  }\n\n  function prevQuestionValidationDragndrop(){\n    let valid = true\n    let i = 0\n    while(valid && i < nodes.length){\n      //table.getRelation(question.id, x.id)\n      if(table.getRelation(questions[currentQuestion].getId(), nodes[i].getName())[0][2] === false){\n        valid = false\n      }\n      i++\n    }\n    \n    if(valid){\n      prevQuestion()\n    }\n    else{\n      alert(\"You need to put all the nodes in a box before going back.\")\n    }\n  }\n\n  function questionComponentSelector(){\n    switch (questions[currentQuestion].getType()) {\n        case \"select\":\n          return (\n            <Box id=\"case 3 box\" fill= \"vertical\">\n              <Text>{questions[currentQuestion].getText()}</Text>\n              <NodeRow\n                nodes={nodes}\n                question={questions[currentQuestion]}\n                table={table}\n                setTable={setTable}\n                filterYou={true}\n                currentQuestion={currentQuestion}\n              />\n              <ButtonFooter\n              onNext = {() => nextQuestion()}\n              onPrev = {() => prevQuestion()}\n              /> \n            </Box>\n          );\n          case \"dragndrop\":\n            return (\n              <Box id=\"case 3 box\" fill= \"vertical\">\n                <Text>{questions[currentQuestion].getText()}</Text>\n                <LineBox\n                  nodes={nodes}\n                  question={questions[currentQuestion]}\n                  table={table}\n                  setTable={setTable}\n                  filterYou={false}\n                />\n                <ButtonFooter\n                onNext = {() => nextQuestionValidationDragndrop()}\n                onPrev = {() => prevQuestionValidationDragndrop()}\n                /> \n              </Box>\n            );\n            case \"ladder\":\n              return (\n                <Box id=\"case 3 box\" fill= \"vertical\">\n                  <Text>{questions[currentQuestion].getText()}</Text>\n                  <LineBox\n                    nodes={nodes}\n                    question={questions[currentQuestion]}\n                    table={table}\n                    setTable={setTable}\n                    filterYou={false}\n                  />\n                  <ButtonFooter\n                  onNext = {() => nextQuestionValidationDragndrop()}\n                  onPrev = {() => prevQuestionValidationDragndrop()}\n                  /> \n                </Box>\n              );\n        default:\n          (console.log('Question type not valid.', questions[currentQuestion]))\n      }\n}\n  return questionComponentSelector()\n    \n  }"]},"metadata":{},"sourceType":"module"}