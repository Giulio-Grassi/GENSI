{"ast":null,"code":"var _jsxFileName = \"/Users/gg/dev/egoSurveyReact/egoSurveyReact/src/components/nodeRow.jsx\",\n    _s = $RefreshSig$();\n\n/**\n * arranges the nodes in a row so it's possible to select them,\n * once a node is selected it bumps up and changes color\n */\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Box, DataTable, Button, Text, Layer, Heading, TextInput } from \"grommet\";\nimport { select, forceSimulation, forceManyBody, forceCollide, forceCenter, tickFormat } from 'd3';\nimport useResizeObserver from './useResizeObserver';\nimport { forceLink } from 'd3-force';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function NodeRow({\n  nodes,\n  question,\n  table,\n  setTable,\n  currentQuestion,\n  filterYou\n}) {\n  _s();\n\n  const CIRCLE_RADIUS = 30;\n  const [nodeName, setNodeName] = React.useState('');\n  const [didFilter, setDidFilter] = React.useState(false);\n  const svgRef = useRef(); //gets a ref for the svg in which d3 renders in \n\n  const wrapperRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef); //used to resize \n\n  const [nodesRepresentation, setNodesRepresentation] = React.useState(nodes.map(x => {\n    return {\n      id: x.getName(),\n      selected: false\n    };\n  }));\n  useEffect(() => {\n    setNodesRepresentation(nodesRepresentation.map(x => {\n      x.selected = table.getRelation(question, x.id)[0][2];\n      return x;\n    }));\n  }, [currentQuestion]); // will be called initially and on every data change\n\n  useEffect(() => {\n    if (!dimensions) return; // console.log(\"prefilter nodes \", nodes)\n    // if(filterYou && !didFilter){\n    //   //const filteredNodes = nodes.filter(e => e.id !=  \"You\") //removing you as we do not need it for this screen, TODO make it a var\n    //  setNodes(nodes.filter(e => e.id !=  \"You\"))\n    //  setDidFilter(true)\n    //  console.log(\"FILTERED\")\n    // }\n\n    console.log(\"postfilter nodesRepresentation \", nodesRepresentation);\n    const manualPadding = 100;\n    const nodeOffset = (dimensions.width - 2 * manualPadding) / nodesRepresentation.length;\n    console.log(\"width\", dimensions.width);\n    const svg = select(svgRef.current);\n    svg.selectAll(\"*\").remove(); //Clear canvas so no duplicates are trailed every refresh\n    // centering workaround\n\n    svg.attr(\"viewBox\", [-dimensions.width / 2, -dimensions.height / 2, dimensions.width, dimensions.height]);\n    const node = svg.selectAll(\".node\").data(nodesRepresentation).join(\"g\").attr('class', 'node') //.attr(\"x\", d => d.x = (-dimensions.width / 2  + manualPadding + nodeOffset/2 + d.index * nodeOffset))\n    //.attr(\"y\", d => d.y = 0)\n    //.attr(\"selected\", d => d.selected)\n    //.attr(\"transform\",d => `translate(${d.x}, ${d.y})`)\n    .on(\"mouseover\", handleMouseOver).on(\"mouseout\", handleMouseOut).on(\"click\", handleMouseClick);\n    node.append('circle') //.join(\"g\")\n    .attr(\"r\", CIRCLE_RADIUS).attr(\"fill\", function (d) {\n      return '#5b8075';\n    });\n    node.append(\"text\") //.join(\"g\")\n    .text(d => d.id).attr('text-anchor', 'middle').attr('alignment-baseline', 'middle').style('fill', '#000').style('font-size', '20px');\n\n    function handleMouseClick(d, i) {\n      console.log(\"clicked\"); // nodes[this.index].selected = true\n\n      var name = nodesRepresentation[i.index].id; //enforce node name uniqueness to make this bulletproof\n\n      setNodesRepresentation(nodesRepresentation.map(x => {\n        if (x.id === name) {\n          var y = x;\n          y.selected = !y.selected;\n          return y;\n        } else {\n          return x;\n        }\n      }));\n      console.log(\"QUESTION: \" + question + \" NAME:\" + name);\n      setTable(table.toggleRelation(question, name));\n      console.log(\"Updated table\", table.getAll());\n      console.log(\"clicked nodesRepresentation\", nodesRepresentation);\n      console.log(\"indexed node\", nodesRepresentation[i.index]);\n      console.log(d);\n    } // Create Event Handlers for mouse\n\n\n    function handleMouseOver(d, i) {\n      // Add interactivity\n      select(this).selectChild('circle') //select circle at mouseposition... otherwise label gets in the way\n      .transition().attr(\"r\", CIRCLE_RADIUS * 1.5).attr(\"fill\", function (d) {\n        return '#ffa500';\n      });\n    }\n\n    function handleMouseOut(d, i) {\n      // Use D3 to select element, change color back to normal\n      select(this).selectChild('circle').transition().attr(\"r\", CIRCLE_RADIUS).attr(\"fill\", function (d) {\n        return '#5b8075';\n      });\n    } //   node.checked = function (val) { https://bl.ocks.org/Lulkafe/c77a36d5efb603e788b03eb749a4a714\n    //     if(val === undefined) {\n    //         return checked;    //     } else {\n    //         checked = val;\n    //         return checkBox;\n    //     }\n    // }\n    //more than having the simulation, just have the posittions in the state?\n\n\n    const simulation = forceSimulation(nodesRepresentation);\n    simulation.on(\"tick\", () => {\n      node //  // .attr(\"x\", d => (d.index * nodeOffset) + manualPadding - ( -dimensions.width / 2))\n      //   //.attr(\"transform\", d => `translate(${ -((d.index * nodeOffset) + manualPadding - (dimensions.width / 2))}, ${d.selected ? d.y : 100 })`);\n      .attr(\"transform\", d => `translate(${d.x = -dimensions.width / 2 + manualPadding + nodeOffset / 2 + d.index * nodeOffset}, ${d.selected ? d.y = 0 : d.y = 100})`); //console.log(\"simulation nodes \", nodes)\n    });\n  }, [nodesRepresentation, dimensions]); //TODO check if this nodes param here is right and what it does...\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    fill: true,\n    ref: wrapperRef,\n    pad: \"small\",\n    height: \"xxlarge\",\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: svgRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 21\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 171,\n    columnNumber: 17\n  }, this);\n}\n\n_s(NodeRow, \"A0voKH1oEeTupD5pCkOEFQc1X8c=\", false, function () {\n  return [useResizeObserver];\n});\n\n_c = NodeRow;\n\nvar _c;\n\n$RefreshReg$(_c, \"NodeRow\");","map":{"version":3,"sources":["/Users/gg/dev/egoSurveyReact/egoSurveyReact/src/components/nodeRow.jsx"],"names":["React","useState","useEffect","useRef","Box","DataTable","Button","Text","Layer","Heading","TextInput","select","forceSimulation","forceManyBody","forceCollide","forceCenter","tickFormat","useResizeObserver","forceLink","NodeRow","nodes","question","table","setTable","currentQuestion","filterYou","CIRCLE_RADIUS","nodeName","setNodeName","didFilter","setDidFilter","svgRef","wrapperRef","dimensions","nodesRepresentation","setNodesRepresentation","map","x","id","getName","selected","getRelation","console","log","manualPadding","nodeOffset","width","length","svg","current","selectAll","remove","attr","height","node","data","join","on","handleMouseOver","handleMouseOut","handleMouseClick","append","d","text","style","i","name","index","y","toggleRelation","getAll","selectChild","transition","simulation"],"mappings":"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","sourcesContent":["/**\n * arranges the nodes in a row so it's possible to select them,\n * once a node is selected it bumps up and changes color\n */\n\n import React, { useState, useEffect, useRef} from 'react';\n import { Box, DataTable, Button, Text, Layer, Heading, TextInput } from \"grommet\";\nimport {select, forceSimulation, forceManyBody, forceCollide, forceCenter, tickFormat,} from 'd3'\nimport useResizeObserver from './useResizeObserver'\nimport { forceLink } from 'd3-force';\n\n\nexport default function NodeRow({\n     nodes,\n     question,\n     table,\n     setTable,\n     currentQuestion,\n      filterYou\n    }) {\n    const CIRCLE_RADIUS = 30;\n    const [nodeName, setNodeName] = React.useState('');\n    const [didFilter, setDidFilter] = React.useState(false);\n    const svgRef = useRef(); //gets a ref for the svg in which d3 renders in \n    const wrapperRef = useRef();\n    const dimensions = useResizeObserver(wrapperRef); //used to resize \n    const [nodesRepresentation, setNodesRepresentation] = React.useState(nodes.map(x => {\n      return {\n        id: x.getName(),\n        selected: false\n      }\n    }))\n\n    useEffect(() => {\n      setNodesRepresentation(nodesRepresentation.map(x => {\n        x.selected = table.getRelation(question, x.id)[0][2]\n        return x\n      }))\n    }, [currentQuestion])\n\n    \n\n\n      // will be called initially and on every data change\n    useEffect(() => {\n      if (!dimensions) return;\n\n      // console.log(\"prefilter nodes \", nodes)\n      // if(filterYou && !didFilter){\n      //   //const filteredNodes = nodes.filter(e => e.id !=  \"You\") //removing you as we do not need it for this screen, TODO make it a var\n       \n      //  setNodes(nodes.filter(e => e.id !=  \"You\"))\n      //  setDidFilter(true)\n      //  console.log(\"FILTERED\")\n       \n      // }\n      console.log(\"postfilter nodesRepresentation \", nodesRepresentation)\n\n\n        const manualPadding = 100\n        const nodeOffset = (dimensions.width - 2* manualPadding)/ nodesRepresentation.length\n        console.log(\"width\", dimensions.width)\n        \n        const svg = select(svgRef.current);\n        svg.selectAll(\"*\").remove(); //Clear canvas so no duplicates are trailed every refresh\n\n\n            // centering workaround\n    svg.attr(\"viewBox\", [\n        -dimensions.width / 2,\n        -dimensions.height / 2,\n        dimensions.width,\n        dimensions.height\n      ]);\n\n  const node = svg\n      .selectAll(\".node\")\n      .data(nodesRepresentation)\n      .join(\"g\")\n      .attr('class', 'node')\n      //.attr(\"x\", d => d.x = (-dimensions.width / 2  + manualPadding + nodeOffset/2 + d.index * nodeOffset))\n      //.attr(\"y\", d => d.y = 0)\n      //.attr(\"selected\", d => d.selected)\n      //.attr(\"transform\",d => `translate(${d.x}, ${d.y})`)\n      .on(\"mouseover\", handleMouseOver)\n      .on(\"mouseout\", handleMouseOut)\n      .on(\"click\", handleMouseClick);\n\n\n  node.append('circle')\n      //.join(\"g\")\n      .attr(\"r\", CIRCLE_RADIUS)\n      .attr(\"fill\", function (d) { return '#5b8075'; });  \n\n\n  node.append(\"text\")\n      //.join(\"g\")\n      .text(d => d.id)\n      .attr('text-anchor', 'middle')\n      .attr('alignment-baseline', 'middle')\n      .style('fill', '#000')\n      .style('font-size', '20px');\n\n    \n      function handleMouseClick(d, i){\n\n        console.log(\"clicked\")\n        // nodes[this.index].selected = true\n        var name = nodesRepresentation[i.index].id //enforce node name uniqueness to make this bulletproof\n        setNodesRepresentation(\n          nodesRepresentation.map(x => {\n            if(x.id === name){\n              var y = x\n              y.selected = !y.selected\n              return y\n            }\n            else{\n              return x\n            }\n          })\n        )\n        console.log(\"QUESTION: \"+question+\" NAME:\"+name)\n        setTable(table.toggleRelation(question, name))\n        console.log(\"Updated table\", table.getAll())\n        console.log(\"clicked nodesRepresentation\", nodesRepresentation)\n        console.log(\"indexed node\", nodesRepresentation[i.index])\n        console.log(d);\n      }\n      // Create Event Handlers for mouse\n      function handleMouseOver(d, i) {  // Add interactivity\n\n        select(this).selectChild('circle') //select circle at mouseposition... otherwise label gets in the way\n        .transition()\n        .attr(\"r\", CIRCLE_RADIUS *1.5)\n        .attr(\"fill\", function (d) { return '#ffa500'; })\n      }\n\n  function handleMouseOut(d, i) {\n        // Use D3 to select element, change color back to normal\n        select(this).selectChild('circle')\n        .transition()\n        .attr(\"r\", CIRCLE_RADIUS)\n        .attr(\"fill\", function (d) { return '#5b8075'; })\n      }\n\n\n    //   node.checked = function (val) { https://bl.ocks.org/Lulkafe/c77a36d5efb603e788b03eb749a4a714\n\n    //     if(val === undefined) {\n    //         return checked;    //     } else {\n    //         checked = val;\n    //         return checkBox;\n    //     }\n    // }\n\n      //more than having the simulation, just have the posittions in the state?\n      \n      const simulation = forceSimulation(nodesRepresentation)\n\n      simulation.on(\"tick\", () => {\n         node\n      //  // .attr(\"x\", d => (d.index * nodeOffset) + manualPadding - ( -dimensions.width / 2))\n      //   //.attr(\"transform\", d => `translate(${ -((d.index * nodeOffset) + manualPadding - (dimensions.width / 2))}, ${d.selected ? d.y : 100 })`);\n         .attr(\"transform\", d => `translate(${d.x = (-dimensions.width / 2  + manualPadding + nodeOffset/2 + d.index * nodeOffset)}, ${d.selected ? d.y = 0 : d.y = 100 })`);\n\n        //console.log(\"simulation nodes \", nodes)\n      });\n      }, [nodesRepresentation, dimensions]); //TODO check if this nodes param here is right and what it does...\n\n        return(\n                <Box fill={true} ref={wrapperRef}  pad=\"small\" height=\"xxlarge\">\n                    <svg ref={svgRef}></svg>\n                </Box>\n        )\n}"]},"metadata":{},"sourceType":"module"}