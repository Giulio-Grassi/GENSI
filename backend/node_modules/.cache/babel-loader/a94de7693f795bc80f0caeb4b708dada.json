{"ast":null,"code":"//Table tuples are [questionId, nodeName, status]\nexport class Table {\n  constructor() {\n    this.insertRelation = (questionId, nodeName, status) => {\n      this.matrix.push([questionId, nodeName, status]);\n    };\n\n    this.updateRelation = (questionId, nodeName, status) => {\n      this.matrix.map(x => {\n        if (x[0] === questionId && x[1] === nodeName) {\n          return [questionId, nodeName, status];\n        } else {\n          return x;\n        }\n      });\n    };\n\n    this.toggleRelation = (questionId, nodeName) => {\n      this.matrix = this.matrix.map(x => {\n        if (x[0] === questionId && x[1] === nodeName) {\n          return [questionId, nodeName, !x[2]];\n        } else {\n          return x;\n        }\n      });\n      return this;\n    };\n\n    this.deleteRelation = (questionId, nodeName) => {\n      this.matrix = this.matrix.filter(x => x[0] !== questionId || x[1] !== nodeName);\n    };\n\n    this.getRelation = (questionId, nodeName) => {\n      return this.matrix.filter(x => x[0] === questionId && x[1] === nodeName);\n    };\n\n    this.getAnswers = questionId => {\n      return this.matrix.filter(x => x[0] === questionId);\n    };\n\n    this.getAll = () => {\n      return this.matrix;\n    };\n\n    this.matrix = [];\n  }\n\n}","map":{"version":3,"sources":["/Users/gg/dev/egoSurveyReact/egoSurveyReact/src/components/models/table.js"],"names":["Table","constructor","insertRelation","questionId","nodeName","status","matrix","push","updateRelation","map","x","toggleRelation","deleteRelation","filter","getRelation","getAnswers","getAll"],"mappings":"AAAA;AACA,OAAO,MAAMA,KAAN,CAAY;AACjBC,EAAAA,WAAW,GAAG;AAAA,SAIdC,cAJc,GAIG,CAACC,UAAD,EAAaC,QAAb,EAAuBC,MAAvB,KAAkC;AACjD,WAAKC,MAAL,CAAYC,IAAZ,CAAiB,CAACJ,UAAD,EAAaC,QAAb,EAAuBC,MAAvB,CAAjB;AACD,KANa;;AAAA,SAQdG,cARc,GAQG,CAACL,UAAD,EAAaC,QAAb,EAAuBC,MAAvB,KAAkC;AACjD,WAAKC,MAAL,CAAYG,GAAZ,CAAgBC,CAAC,IAAI;AACnB,YAAGA,CAAC,CAAC,CAAD,CAAD,KAASP,UAAT,IAAuBO,CAAC,CAAC,CAAD,CAAD,KAASN,QAAnC,EAA4C;AAC1C,iBAAO,CAACD,UAAD,EAAaC,QAAb,EAAuBC,MAAvB,CAAP;AACD,SAFD,MAGI;AACF,iBAAOK,CAAP;AACD;AACF,OAPD;AAQD,KAjBa;;AAAA,SAmBdC,cAnBc,GAmBG,CAACR,UAAD,EAAaC,QAAb,KAA0B;AACzC,WAAKE,MAAL,GAAc,KAAKA,MAAL,CAAYG,GAAZ,CAAgBC,CAAC,IAAI;AACjC,YAAGA,CAAC,CAAC,CAAD,CAAD,KAASP,UAAT,IAAuBO,CAAC,CAAC,CAAD,CAAD,KAASN,QAAnC,EAA4C;AAC1C,iBAAO,CAACD,UAAD,EAAaC,QAAb,EAAuB,CAACM,CAAC,CAAC,CAAD,CAAzB,CAAP;AACD,SAFD,MAGI;AACF,iBAAOA,CAAP;AACD;AACF,OAPa,CAAd;AAQA,aAAO,IAAP;AACD,KA7Ba;;AAAA,SA+BdE,cA/Bc,GA+BG,CAACT,UAAD,EAAaC,QAAb,KAA0B;AACzC,WAAKE,MAAL,GAAc,KAAKA,MAAL,CAAYO,MAAZ,CAAmBH,CAAC,IAAIA,CAAC,CAAC,CAAD,CAAD,KAASP,UAAT,IAAuBO,CAAC,CAAC,CAAD,CAAD,KAASN,QAAxD,CAAd;AACD,KAjCa;;AAAA,SAmCdU,WAnCc,GAmCA,CAACX,UAAD,EAAaC,QAAb,KAA0B;AACtC,aAAO,KAAKE,MAAL,CAAYO,MAAZ,CAAmBH,CAAC,IAAIA,CAAC,CAAC,CAAD,CAAD,KAASP,UAAT,IAAuBO,CAAC,CAAC,CAAD,CAAD,KAASN,QAAxD,CAAP;AACD,KArCa;;AAAA,SAuCdW,UAvCc,GAuCAZ,UAAD,IAAgB;AAC3B,aAAO,KAAKG,MAAL,CAAYO,MAAZ,CAAmBH,CAAC,IAAIA,CAAC,CAAC,CAAD,CAAD,KAASP,UAAjC,CAAP;AACD,KAzCa;;AAAA,SA2Cda,MA3Cc,GA2CL,MAAM;AACb,aAAO,KAAKV,MAAZ;AACD,KA7Ca;;AACZ,SAAKA,MAAL,GAAc,EAAd;AACD;;AAHgB","sourcesContent":["//Table tuples are [questionId, nodeName, status]\nexport class Table {\n  constructor() {\n    this.matrix = [];\n  }\n\n  insertRelation = (questionId, nodeName, status) => {\n    this.matrix.push([questionId, nodeName, status])\n  }\n\n  updateRelation = (questionId, nodeName, status) => {\n    this.matrix.map(x => {\n      if(x[0] === questionId && x[1] === nodeName){\n        return [questionId, nodeName, status]\n      }\n      else{\n        return x\n      }\n    })\n  }\n\n  toggleRelation = (questionId, nodeName) => {\n    this.matrix = this.matrix.map(x => {\n      if(x[0] === questionId && x[1] === nodeName){\n        return [questionId, nodeName, !x[2]]\n      }\n      else{\n        return x\n      }\n    })\n    return this\n  }\n\n  deleteRelation = (questionId, nodeName) => {\n    this.matrix = this.matrix.filter(x => x[0] !== questionId || x[1] !== nodeName)\n  }\n\n  getRelation = (questionId, nodeName) => {\n    return this.matrix.filter(x => x[0] === questionId && x[1] === nodeName)\n  }\n\n  getAnswers = (questionId) => {\n    return this.matrix.filter(x => x[0] === questionId)\n  }\n\n  getAll = () => {\n    return this.matrix\n  }\n}"]},"metadata":{},"sourceType":"module"}